// DO NOT EDIT! Autogenerated by HLA tool

namespace SomeModule {
    class SomeInterface2Mock implements SomeInterface2 {
        // referenceOtherClass
        private readonly referenceOtherClassCalls: OtherClass[] = []
        private readonly referenceOtherClassResponses: [OtherModule.ExpectedOtherClass, OtherModule.Builder.OtherClassDef][] = []

        setReferenceOtherClassResponse(args: OtherModule.ExpectedOtherClass, response: OtherModule.Builder.OtherClassDef) {
            referenceOtherClassResponses.push([args, response])
        }

        override referenceOtherClass(other: OtherClass): OtherClass {
            referenceOtherClassCalls.push(other)
            val findResult = referenceOtherClassResponses.find( it => diffOtherClass(other, it[0]) == "" )
            return otherClass(findResult?.second ?: {})
        }

        assertReferenceOtherClassCalled(times: number = 1) {
            assertThat(referenceOtherClassCalls.size).withFailMessage("Expected referenceOtherClass to be called $times times, but was called $referenceOtherClassCalls times").isEqualTo(times)
        }

        assertReferenceOtherClassCalledForArgs(args: OtherModule.ExpectedOtherClass, times: number = 1) {
            val calls = referenceOtherClassCalls.filter { diffOtherClass(it, args) == "" }
            assertThat(calls.size).withFailMessage("Expected referenceOtherClass to be called $times times, but was called $referenceOtherClassCalls times").isEqualTo(times)
        }
        // referenceLegacyType
        private readonly referenceLegacyTypeCalls: LegacyType[] = []
        private readonly referenceLegacyTypeResponses: [LegacyType, LegacyType][] = []

        setReferenceLegacyTypeResponse(args: LegacyType, response: LegacyType) {
            referenceLegacyTypeResponses.push([args, response])
        }

        override referenceLegacyType(legacyType: LegacyType): LegacyType {
            referenceLegacyTypeCalls.push(legacyType)
            val findResult = referenceLegacyTypeResponses.find( it => diffLegacyType(legacyType, it[0]) == "" )
            return legacyType(findResult?.second ?: null)
        }

        assertReferenceLegacyTypeCalled(times: number = 1) {
            assertThat(referenceLegacyTypeCalls.size).withFailMessage("Expected referenceLegacyType to be called $times times, but was called $referenceLegacyTypeCalls times").isEqualTo(times)
        }

        assertReferenceLegacyTypeCalledForArgs(args: LegacyType, times: number = 1) {
            val calls = referenceLegacyTypeCalls.filter { diffLegacyType(it, args) == "" }
            assertThat(calls.size).withFailMessage("Expected referenceLegacyType to be called $times times, but was called $referenceLegacyTypeCalls times").isEqualTo(times)
        }
    }
}