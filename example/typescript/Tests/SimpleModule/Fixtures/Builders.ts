// DO NOT EDIT! Autogenerated by HLA tool

namespace SimpleModule.Builder {
    export function simpleId(value: string = "someValue"): SimpleId {
        return new SimpleId(value)
    }

    export function someLongWrapper(value: number = 0): SomeLongWrapper {
        return new SomeLongWrapper(value)
    }

    export interface UniqueIdEntryDef {
        id?: string,
    }
    export function uniqueIdEntry(def?: UniqueIdEntryDef): UniqueIdEntry {
        const final_id = def?.id ?? "someValue"

        return UniqueIdEntry.create(
            final_id,
        )
    }

    export interface SomeMethodInputDef {
        id?: string,
    }
    export function someMethodInput(def?: SomeMethodInputDef): SomeMethodInput {
        const final_id = def?.id ?? "someValue"

        return SomeMethodInput.create(
            new SimpleId(final_id),
        )
    }

    export interface SomeSimplePropertyDef {
        id?: string,
        name?: string,
        entries?: SimpleModule.Builder.UniqueIdEntryDef[],
    }
    export function someSimpleProperty(def?: SomeSimplePropertyDef): SomeSimpleProperty {
        const final_id = def?.id ?? "someValue"
        const final_name = def?.name ?? "ExampleName"
        const final_entries = def?.entries ?? []

        return SomeSimpleProperty.create(
            new SimpleId(final_id),
            final_name,
            final_entries.map(it => SimpleModule.Builder.uniqueIdEntry(it)),
        )
    }

    export interface SimpleInternalDataDef {
        id?: number,
        value?: number,
    }
    export function simpleInternalData(def?: SimpleInternalDataDef): SimpleInternalData {
        const final_id = def?.id ?? 0
        const final_value = def?.value ?? 0

        return SimpleInternalData.create(
            new SomeLongWrapper(final_id),
            final_value,
        )
    }

    export interface SimpleDataDef {
        id?: string,
        name?: string,
        data?: SimpleModule.Builder.SimpleInternalDataDef[],
    }
    export function simpleData(def?: SimpleDataDef): SimpleData {
        const final_id = def?.id ?? "someValue"
        const final_name = def?.name ?? "someValue"
        const final_data = def?.data ?? []

        return SimpleData.create(
            new SimpleId(final_id),
            final_name,
            final_data.map(it => SimpleModule.Builder.simpleInternalData(it)),
        )
    }
}