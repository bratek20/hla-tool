// DO NOT EDIT! Autogenerated by HLA tool

class SomeEmptyInterfaceMock implements SomeEmptyInterface {
    reset() {
    }
}

class SomeInterfaceMock implements SomeInterface {
    private readonly someEmptyMethodCalls: number
    private readonly someCommandCalls: number
    private readonly someQueryCalls: number
    private readonly optMethodCalls: number
    private readonly methodWithListOfSimpleVOCalls: number
    private readonly methodWithAnyCalls: number
    private readonly methodReturningOptSimpleVoCalls: number
    someEmptyMethod(): void {
        this.someEmptyMethodCalls = this.someEmptyMethodCalls + 1
    }
    someCommand(id: SomeId, amount: number): void {
        this.someCommandCalls = this.someCommandCalls + 1
    }
    someQuery(query: SomeQueryInput): SomeClass {
        this.someQueryCalls = this.someQueryCalls + 1
        return SomeModule.Builder.someClass(undefined)
    }
    optMethod(optId: Optional<SomeId>): Optional<SomeClass> {
        this.optMethodCalls = this.optMethodCalls + 1
        return Optional.of(undefined).map(it => SomeModule.Builder.someClass(it))
    }
    methodWithListOfSimpleVO(list: SomeId[]): SomeId[] {
        this.methodWithListOfSimpleVOCalls = this.methodWithListOfSimpleVOCalls + 1
        return [].map(it => new SomeId(it))
    }
    methodWithAny(i: any): any {
        this.methodWithAnyCalls = this.methodWithAnyCalls + 1
        return undefined
    }
    methodReturningOptSimpleVo(): Optional<SomeId> {
        this.methodReturningOptSimpleVoCalls = this.methodReturningOptSimpleVoCalls + 1
        return Optional.of(undefined).map(it => new SomeId(it))
    }
    reset() {
        this.someEmptyMethodCalls = 0
        this.someCommandCalls = 0
        this.someQueryCalls = 0
        this.optMethodCalls = 0
        this.methodWithListOfSimpleVOCalls = 0
        this.methodWithAnyCalls = 0
        this.methodReturningOptSimpleVoCalls = 0
    }
}

class SomeInterface2Mock implements SomeInterface2 {
    private readonly referenceOtherClassCalls: number
    private readonly referenceLegacyTypeCalls: number
    referenceOtherClass(other: OtherClass): OtherClass {
        this.referenceOtherClassCalls = this.referenceOtherClassCalls + 1
        return OtherModule.Builder.otherClass(undefined)
    }
    referenceLegacyType(legacyType: LegacyType): LegacyType {
        this.referenceLegacyTypeCalls = this.referenceLegacyTypeCalls + 1
        return TODO()
    }
    reset() {
        this.referenceOtherClassCalls = 0
        this.referenceLegacyTypeCalls = 0
    }
}

class SomeInterface3Mock implements SomeInterface3 {
    private readonly referenceInterfaceCalls: number
    private readonly referenceOtherInterfaceCalls: number
    referenceInterface(empty: SomeEmptyInterface): SomeEmptyInterface {
        this.referenceInterfaceCalls = this.referenceInterfaceCalls + 1
        return TODO()
    }
    referenceOtherInterface(other: OtherInterface): OtherInterface {
        this.referenceOtherInterfaceCalls = this.referenceOtherInterfaceCalls + 1
        return TODO()
    }
    reset() {
        this.referenceInterfaceCalls = 0
        this.referenceOtherInterfaceCalls = 0
    }
}

class SomeModuleHandlersMock implements SomeModuleHandlers {
    private readonly someHandlerCalls: number
    private readonly someHandler2Calls: number
    someHandler(i: SomeHandlerInput): SomeHandlerOutput {
        this.someHandlerCalls = this.someHandlerCalls + 1
        return SomeModule.Builder.someHandlerOutput(undefined)
    }
    someHandler2(i: SomeHandlerInput): SomeHandlerOutput {
        this.someHandler2Calls = this.someHandler2Calls + 1
        return SomeModule.Builder.someHandlerOutput(undefined)
    }
    reset() {
        this.someHandlerCalls = 0
        this.someHandler2Calls = 0
    }
}

class SomeModuleDebugHandlersMock implements SomeModuleDebugHandlers {
    private readonly someDebugHandlerCalls: number
    private readonly someDebugHandler2Calls: number
    someDebugHandler(i: SomeHandlerInput): SomeHandlerOutput {
        this.someDebugHandlerCalls = this.someDebugHandlerCalls + 1
        return SomeModule.Builder.someHandlerOutput(undefined)
    }
    someDebugHandler2(i: SomeHandlerInput): SomeHandlerOutput {
        this.someDebugHandler2Calls = this.someDebugHandler2Calls + 1
        return SomeModule.Builder.someHandlerOutput(undefined)
    }
    reset() {
        this.someDebugHandlerCalls = 0
        this.someDebugHandler2Calls = 0
    }
}

namespace SomeModule.Mocks {
    export function createSomeEmptyInterfaceMock(): SomeEmptyInterfaceMock {
        return new SomeEmptyInterfaceMock()
    }

    export function setupSomeEmptyInterface(): SomeEmptyInterfaceMock {
        const mock = SomeModule.Mocks.createSomeEmptyInterfaceMock()
        return mock
    }

    export function createSomeInterfaceMock(): SomeInterfaceMock {
        return new SomeInterfaceMock()
    }

    export function setupSomeInterface(): SomeInterfaceMock {
        const mock = SomeModule.Mocks.createSomeInterfaceMock()
        SomeModule.Api.someEmptyMethod = CreateMock(SomeModule.Api.someEmptyMethod, () => { mock.someEmptyMethod() })
        SomeModule.Api.someCommand = CreateMock(SomeModule.Api.someCommand, (id: SomeId, amount: number) => { mock.someCommand(id, amount) })
        SomeModule.Api.someQuery = CreateMock(SomeModule.Api.someQuery, (query: SomeQueryInput) => { return mock.someQuery(query) })
        SomeModule.Api.optMethod = CreateMock(SomeModule.Api.optMethod, (optId: Optional<SomeId>) => { return mock.optMethod(optId) })
        SomeModule.Api.methodWithListOfSimpleVO = CreateMock(SomeModule.Api.methodWithListOfSimpleVO, (list: SomeId[]) => { return mock.methodWithListOfSimpleVO(list) })
        SomeModule.Api.methodWithAny = CreateMock(SomeModule.Api.methodWithAny, (i: any) => { return mock.methodWithAny(i) })
        SomeModule.Api.methodReturningOptSimpleVo = CreateMock(SomeModule.Api.methodReturningOptSimpleVo, () => { return mock.methodReturningOptSimpleVo() })
        return mock
    }

    export function createSomeInterface2Mock(): SomeInterface2Mock {
        return new SomeInterface2Mock()
    }

    export function setupSomeInterface2(): SomeInterface2Mock {
        const mock = SomeModule.Mocks.createSomeInterface2Mock()
        SomeModule.Api.referenceOtherClass = CreateMock(SomeModule.Api.referenceOtherClass, (other: OtherClass) => { return mock.referenceOtherClass(other) })
        SomeModule.Api.referenceLegacyType = CreateMock(SomeModule.Api.referenceLegacyType, (legacyType: LegacyType) => { return mock.referenceLegacyType(legacyType) })
        return mock
    }

    export function createSomeInterface3Mock(): SomeInterface3Mock {
        return new SomeInterface3Mock()
    }

    export function setupSomeInterface3(): SomeInterface3Mock {
        const mock = SomeModule.Mocks.createSomeInterface3Mock()
        SomeModule.Api.referenceInterface = CreateMock(SomeModule.Api.referenceInterface, (empty: SomeEmptyInterface) => { return mock.referenceInterface(empty) })
        SomeModule.Api.referenceOtherInterface = CreateMock(SomeModule.Api.referenceOtherInterface, (other: OtherInterface) => { return mock.referenceOtherInterface(other) })
        return mock
    }

    export function createSomeModuleHandlersMock(): SomeModuleHandlersMock {
        return new SomeModuleHandlersMock()
    }

    export function setupSomeModuleHandlers(): SomeModuleHandlersMock {
        const mock = SomeModule.Mocks.createSomeModuleHandlersMock()
        SomeModule.Api.someHandler = CreateMock(SomeModule.Api.someHandler, (i: SomeHandlerInput) => { return mock.someHandler(i) })
        SomeModule.Api.someHandler2 = CreateMock(SomeModule.Api.someHandler2, (i: SomeHandlerInput) => { return mock.someHandler2(i) })
        return mock
    }

    export function createSomeModuleDebugHandlersMock(): SomeModuleDebugHandlersMock {
        return new SomeModuleDebugHandlersMock()
    }

    export function setupSomeModuleDebugHandlers(): SomeModuleDebugHandlersMock {
        const mock = SomeModule.Mocks.createSomeModuleDebugHandlersMock()
        SomeModule.Api.someDebugHandler = CreateMock(SomeModule.Api.someDebugHandler, (i: SomeHandlerInput) => { return mock.someDebugHandler(i) })
        SomeModule.Api.someDebugHandler2 = CreateMock(SomeModule.Api.someDebugHandler2, (i: SomeHandlerInput) => { return mock.someDebugHandler2(i) })
        return mock
    }
}