// DO NOT EDIT! Autogenerated by HLA tool

class SomeInterfaceMock implements SomeInterface {
    private someEmptyMethodCallsNumber: number = 0
    private someCommandCallsNumber: number = 0
    private someQueryCallsNumber: number = 0
    private someQueryResponse: SomeModule.Builder.SomeClassDef = undefined
    private optMethodCallsNumber: number = 0
    private optMethodResponse: SomeModule.Builder.SomeClassDef | undefined = undefined
    private methodWithListOfSimpleVOCallsNumber: number = 0
    private methodWithListOfSimpleVOResponse: string[] = []
    private methodWithAnyCallsNumber: number = 0
    private methodWithAnyResponse: any = undefined
    private methodReturningOptSimpleVoCallsNumber: number = 0
    private methodReturningOptSimpleVoResponse: string | undefined = undefined
    private methodReturningNumericTypeCallsNumber: number = 0
    private methodReturningNumericTypeResponse: number = 0
    someEmptyMethod(): void {
        this.someEmptyMethodCallsNumber = this.someEmptyMethodCallsNumber + 1
    }
    assertSomeEmptyMethodCallsNumber(expectedNumber: number) {
        AssertEquals(this.someEmptyMethodCallsNumber, expectedNumber, "Expected 'someEmptyMethod' to be called " + expectedNumber + " times but was called " + this.someEmptyMethodCallsNumber + " times")
    }
    someCommand(id: SomeId, amount: number): void {
        this.someCommandCallsNumber = this.someCommandCallsNumber + 1
    }
    assertSomeCommandCallsNumber(expectedNumber: number) {
        AssertEquals(this.someCommandCallsNumber, expectedNumber, "Expected 'someCommand' to be called " + expectedNumber + " times but was called " + this.someCommandCallsNumber + " times")
    }
    someQuery(query: SomeQueryInput): SomeClass {
        this.someQueryCallsNumber = this.someQueryCallsNumber + 1
        return SomeModule.Builder.someClass(this.someQueryResponse)
    }
    assertSomeQueryCallsNumber(expectedNumber: number) {
        AssertEquals(this.someQueryCallsNumber, expectedNumber, "Expected 'someQuery' to be called " + expectedNumber + " times but was called " + this.someQueryCallsNumber + " times")
    }
    setSomeQueryResponse(response: SomeModule.Builder.SomeClassDef) {
        this.someQueryResponse = response
    }
    optMethod(optId: Optional<SomeId>): Optional<SomeClass> {
        this.optMethodCallsNumber = this.optMethodCallsNumber + 1
        return Optional.of(this.optMethodResponse).map(it => SomeModule.Builder.someClass(it))
    }
    assertOptMethodCallsNumber(expectedNumber: number) {
        AssertEquals(this.optMethodCallsNumber, expectedNumber, "Expected 'optMethod' to be called " + expectedNumber + " times but was called " + this.optMethodCallsNumber + " times")
    }
    setOptMethodResponse(response: SomeModule.Builder.SomeClassDef | undefined) {
        this.optMethodResponse = response
    }
    methodWithListOfSimpleVO(list: SomeId[]): SomeId[] {
        this.methodWithListOfSimpleVOCallsNumber = this.methodWithListOfSimpleVOCallsNumber + 1
        return this.methodWithListOfSimpleVOResponse.map(it => new SomeId(it))
    }
    assertMethodWithListOfSimpleVOCallsNumber(expectedNumber: number) {
        AssertEquals(this.methodWithListOfSimpleVOCallsNumber, expectedNumber, "Expected 'methodWithListOfSimpleVO' to be called " + expectedNumber + " times but was called " + this.methodWithListOfSimpleVOCallsNumber + " times")
    }
    setMethodWithListOfSimpleVOResponse(response: string[]) {
        this.methodWithListOfSimpleVOResponse = response
    }
    methodWithAny(i: any): any {
        this.methodWithAnyCallsNumber = this.methodWithAnyCallsNumber + 1
        return this.methodWithAnyResponse
    }
    assertMethodWithAnyCallsNumber(expectedNumber: number) {
        AssertEquals(this.methodWithAnyCallsNumber, expectedNumber, "Expected 'methodWithAny' to be called " + expectedNumber + " times but was called " + this.methodWithAnyCallsNumber + " times")
    }
    setMethodWithAnyResponse(response: any) {
        this.methodWithAnyResponse = response
    }
    methodReturningOptSimpleVo(): Optional<SomeId> {
        this.methodReturningOptSimpleVoCallsNumber = this.methodReturningOptSimpleVoCallsNumber + 1
        return Optional.of(this.methodReturningOptSimpleVoResponse).map(it => new SomeId(it))
    }
    assertMethodReturningOptSimpleVoCallsNumber(expectedNumber: number) {
        AssertEquals(this.methodReturningOptSimpleVoCallsNumber, expectedNumber, "Expected 'methodReturningOptSimpleVo' to be called " + expectedNumber + " times but was called " + this.methodReturningOptSimpleVoCallsNumber + " times")
    }
    setMethodReturningOptSimpleVoResponse(response: string | undefined) {
        this.methodReturningOptSimpleVoResponse = response
    }
    methodReturningNumericType(): number {
        this.methodReturningNumericTypeCallsNumber = this.methodReturningNumericTypeCallsNumber + 1
        return this.methodReturningNumericTypeResponse
    }
    assertMethodReturningNumericTypeCallsNumber(expectedNumber: number) {
        AssertEquals(this.methodReturningNumericTypeCallsNumber, expectedNumber, "Expected 'methodReturningNumericType' to be called " + expectedNumber + " times but was called " + this.methodReturningNumericTypeCallsNumber + " times")
    }
    setMethodReturningNumericTypeResponse(response: number) {
        this.methodReturningNumericTypeResponse = response
    }
    reset() {
        this.someEmptyMethodCallsNumber = 0
        this.someCommandCallsNumber = 0
        this.someQueryCallsNumber = 0
        this.optMethodCallsNumber = 0
        this.methodWithListOfSimpleVOCallsNumber = 0
        this.methodWithAnyCallsNumber = 0
        this.methodReturningOptSimpleVoCallsNumber = 0
        this.methodReturningNumericTypeCallsNumber = 0
    }
}

class SomeInterface2Mock implements SomeInterface2 {
    private referenceOtherClassCallsNumber: number = 0
    private referenceOtherClassResponse: OtherModule.Builder.OtherClassDef = undefined
    private referenceLegacyTypeCallsNumber: number = 0
    referenceOtherClass(other: OtherClass): OtherClass {
        this.referenceOtherClassCallsNumber = this.referenceOtherClassCallsNumber + 1
        return OtherModule.Builder.otherClass(this.referenceOtherClassResponse)
    }
    assertReferenceOtherClassCallsNumber(expectedNumber: number) {
        AssertEquals(this.referenceOtherClassCallsNumber, expectedNumber, "Expected 'referenceOtherClass' to be called " + expectedNumber + " times but was called " + this.referenceOtherClassCallsNumber + " times")
    }
    setReferenceOtherClassResponse(response: OtherModule.Builder.OtherClassDef) {
        this.referenceOtherClassResponse = response
    }
    referenceLegacyType(legacyType: LegacyType): LegacyType {
        this.referenceLegacyTypeCallsNumber = this.referenceLegacyTypeCallsNumber + 1
        return TODO()
    }
    assertReferenceLegacyTypeCallsNumber(expectedNumber: number) {
        AssertEquals(this.referenceLegacyTypeCallsNumber, expectedNumber, "Expected 'referenceLegacyType' to be called " + expectedNumber + " times but was called " + this.referenceLegacyTypeCallsNumber + " times")
    }
    reset() {
        this.referenceOtherClassCallsNumber = 0
        this.referenceLegacyTypeCallsNumber = 0
    }
}

class SomeModuleHandlersMock implements SomeModuleHandlers {
    private someHandlerCallsNumber: number = 0
    private someHandlerResponse: SomeModule.Builder.SomeHandlerOutputDef = undefined
    private someHandler2CallsNumber: number = 0
    private someHandler2Response: SomeModule.Builder.SomeHandlerOutputDef = undefined
    someHandler(i: SomeHandlerInput): SomeHandlerOutput {
        this.someHandlerCallsNumber = this.someHandlerCallsNumber + 1
        return SomeModule.Builder.someHandlerOutput(this.someHandlerResponse)
    }
    assertSomeHandlerCallsNumber(expectedNumber: number) {
        AssertEquals(this.someHandlerCallsNumber, expectedNumber, "Expected 'someHandler' to be called " + expectedNumber + " times but was called " + this.someHandlerCallsNumber + " times")
    }
    setSomeHandlerResponse(response: SomeModule.Builder.SomeHandlerOutputDef) {
        this.someHandlerResponse = response
    }
    someHandler2(i: SomeHandlerInput): SomeHandlerOutput {
        this.someHandler2CallsNumber = this.someHandler2CallsNumber + 1
        return SomeModule.Builder.someHandlerOutput(this.someHandler2Response)
    }
    assertSomeHandler2CallsNumber(expectedNumber: number) {
        AssertEquals(this.someHandler2CallsNumber, expectedNumber, "Expected 'someHandler2' to be called " + expectedNumber + " times but was called " + this.someHandler2CallsNumber + " times")
    }
    setSomeHandler2Response(response: SomeModule.Builder.SomeHandlerOutputDef) {
        this.someHandler2Response = response
    }
    reset() {
        this.someHandlerCallsNumber = 0
        this.someHandler2CallsNumber = 0
    }
}

class SomeModuleDebugHandlersMock implements SomeModuleDebugHandlers {
    private someDebugHandlerCallsNumber: number = 0
    private someDebugHandlerResponse: SomeModule.Builder.SomeHandlerOutputDef = undefined
    private someDebugHandler2CallsNumber: number = 0
    private someDebugHandler2Response: SomeModule.Builder.SomeHandlerOutputDef = undefined
    someDebugHandler(i: SomeHandlerInput): SomeHandlerOutput {
        this.someDebugHandlerCallsNumber = this.someDebugHandlerCallsNumber + 1
        return SomeModule.Builder.someHandlerOutput(this.someDebugHandlerResponse)
    }
    assertSomeDebugHandlerCallsNumber(expectedNumber: number) {
        AssertEquals(this.someDebugHandlerCallsNumber, expectedNumber, "Expected 'someDebugHandler' to be called " + expectedNumber + " times but was called " + this.someDebugHandlerCallsNumber + " times")
    }
    setSomeDebugHandlerResponse(response: SomeModule.Builder.SomeHandlerOutputDef) {
        this.someDebugHandlerResponse = response
    }
    someDebugHandler2(i: SomeHandlerInput): SomeHandlerOutput {
        this.someDebugHandler2CallsNumber = this.someDebugHandler2CallsNumber + 1
        return SomeModule.Builder.someHandlerOutput(this.someDebugHandler2Response)
    }
    assertSomeDebugHandler2CallsNumber(expectedNumber: number) {
        AssertEquals(this.someDebugHandler2CallsNumber, expectedNumber, "Expected 'someDebugHandler2' to be called " + expectedNumber + " times but was called " + this.someDebugHandler2CallsNumber + " times")
    }
    setSomeDebugHandler2Response(response: SomeModule.Builder.SomeHandlerOutputDef) {
        this.someDebugHandler2Response = response
    }
    reset() {
        this.someDebugHandlerCallsNumber = 0
        this.someDebugHandler2CallsNumber = 0
    }
}

namespace SomeModule.Mocks {
    export function createSomeInterfaceMock(): SomeInterfaceMock {
        return new SomeInterfaceMock()
    }

    export function setupSomeInterface(): SomeInterfaceMock {
        const mock = SomeModule.Mocks.createSomeInterfaceMock()
        SomeModule.Api.someEmptyMethod = CreateMock(SomeModule.Api.someEmptyMethod, () => { mock.someEmptyMethod() })
        SomeModule.Api.someCommand = CreateMock(SomeModule.Api.someCommand, (id: SomeId, amount: number) => { mock.someCommand(id, amount) })
        SomeModule.Api.someQuery = CreateMock(SomeModule.Api.someQuery, (query: SomeQueryInput) => { return mock.someQuery(query) })
        SomeModule.Api.optMethod = CreateMock(SomeModule.Api.optMethod, (optId: Optional<SomeId>) => { return mock.optMethod(optId) })
        SomeModule.Api.methodWithListOfSimpleVO = CreateMock(SomeModule.Api.methodWithListOfSimpleVO, (list: SomeId[]) => { return mock.methodWithListOfSimpleVO(list) })
        SomeModule.Api.methodWithAny = CreateMock(SomeModule.Api.methodWithAny, (i: any) => { return mock.methodWithAny(i) })
        SomeModule.Api.methodReturningOptSimpleVo = CreateMock(SomeModule.Api.methodReturningOptSimpleVo, () => { return mock.methodReturningOptSimpleVo() })
        SomeModule.Api.methodReturningNumericType = CreateMock(SomeModule.Api.methodReturningNumericType, () => { return mock.methodReturningNumericType() })
        return mock
    }

    export function createSomeInterface2Mock(): SomeInterface2Mock {
        return new SomeInterface2Mock()
    }

    export function setupSomeInterface2(): SomeInterface2Mock {
        const mock = SomeModule.Mocks.createSomeInterface2Mock()
        SomeModule.Api.referenceOtherClass = CreateMock(SomeModule.Api.referenceOtherClass, (other: OtherClass) => { return mock.referenceOtherClass(other) })
        SomeModule.Api.referenceLegacyType = CreateMock(SomeModule.Api.referenceLegacyType, (legacyType: LegacyType) => { return mock.referenceLegacyType(legacyType) })
        return mock
    }

    export function createSomeModuleHandlersMock(): SomeModuleHandlersMock {
        return new SomeModuleHandlersMock()
    }

    export function setupSomeModuleHandlers(): SomeModuleHandlersMock {
        const mock = SomeModule.Mocks.createSomeModuleHandlersMock()
        SomeModule.Api.someHandler = CreateMock(SomeModule.Api.someHandler, (i: SomeHandlerInput) => { return mock.someHandler(i) })
        SomeModule.Api.someHandler2 = CreateMock(SomeModule.Api.someHandler2, (i: SomeHandlerInput) => { return mock.someHandler2(i) })
        return mock
    }

    export function createSomeModuleDebugHandlersMock(): SomeModuleDebugHandlersMock {
        return new SomeModuleDebugHandlersMock()
    }

    export function setupSomeModuleDebugHandlers(): SomeModuleDebugHandlersMock {
        const mock = SomeModule.Mocks.createSomeModuleDebugHandlersMock()
        SomeModule.Api.someDebugHandler = CreateMock(SomeModule.Api.someDebugHandler, (i: SomeHandlerInput) => { return mock.someDebugHandler(i) })
        SomeModule.Api.someDebugHandler2 = CreateMock(SomeModule.Api.someDebugHandler2, (i: SomeHandlerInput) => { return mock.someDebugHandler2(i) })
        return mock
    }
}