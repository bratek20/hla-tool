// DO NOT EDIT! Autogenerated by HLA tool

class SomeEmptyInterfaceMock implements SomeEmptyInterface {
    reset() {
    }
}

class SomeInterfaceMock implements SomeInterface {
    private someEmptyMethodCalls: number = 0
    private someCommandCalls: number = 0
    private someQueryCalls: number = 0
    private someQueryResponse: SomeModule.Builder.SomeClassDef = undefined
    private optMethodCalls: number = 0
    private optMethodResponse: SomeModule.Builder.SomeClassDef | undefined = undefined
    private methodWithListOfSimpleVOCalls: number = 0
    private methodWithListOfSimpleVOResponse: string[] = []
    private methodWithAnyCalls: number = 0
    private methodWithAnyResponse: any = undefined
    private methodReturningOptSimpleVoCalls: number = 0
    private methodReturningOptSimpleVoResponse: string | undefined = undefined
    someEmptyMethod(): void {
        this.someEmptyMethodCalls = this.someEmptyMethodCalls + 1
    }
    assertSomeEmptyMethodCalls(expectedNumber: number) {
        AssertEquals(this.someEmptyMethodCalls, expectedNumber, "Expected 'someEmptyMethod' to be called " + expectedNumber + " times but was called " + this.someEmptyMethodCalls + " times")
    }
    someCommand(id: SomeId, amount: number): void {
        this.someCommandCalls = this.someCommandCalls + 1
    }
    assertSomeCommandCalls(expectedNumber: number) {
        AssertEquals(this.someCommandCalls, expectedNumber, "Expected 'someCommand' to be called " + expectedNumber + " times but was called " + this.someCommandCalls + " times")
    }
    someQuery(query: SomeQueryInput): SomeClass {
        this.someQueryCalls = this.someQueryCalls + 1
        return SomeModule.Builder.someClass(this.someQueryResponse)
    }
    assertSomeQueryCalls(expectedNumber: number) {
        AssertEquals(this.someQueryCalls, expectedNumber, "Expected 'someQuery' to be called " + expectedNumber + " times but was called " + this.someQueryCalls + " times")
    }
    setSomeQueryResponse(response: SomeModule.Builder.SomeClassDef) {
        this.someQueryResponse = response
    }
    optMethod(optId: Optional<SomeId>): Optional<SomeClass> {
        this.optMethodCalls = this.optMethodCalls + 1
        return Optional.of(this.optMethodResponse).map(it => SomeModule.Builder.someClass(it))
    }
    assertOptMethodCalls(expectedNumber: number) {
        AssertEquals(this.optMethodCalls, expectedNumber, "Expected 'optMethod' to be called " + expectedNumber + " times but was called " + this.optMethodCalls + " times")
    }
    setOptMethodResponse(response: SomeModule.Builder.SomeClassDef | undefined) {
        this.optMethodResponse = response
    }
    methodWithListOfSimpleVO(list: SomeId[]): SomeId[] {
        this.methodWithListOfSimpleVOCalls = this.methodWithListOfSimpleVOCalls + 1
        return this.methodWithListOfSimpleVOResponse.map(it => new SomeId(it))
    }
    assertMethodWithListOfSimpleVOCalls(expectedNumber: number) {
        AssertEquals(this.methodWithListOfSimpleVOCalls, expectedNumber, "Expected 'methodWithListOfSimpleVO' to be called " + expectedNumber + " times but was called " + this.methodWithListOfSimpleVOCalls + " times")
    }
    setMethodWithListOfSimpleVOResponse(response: string[]) {
        this.methodWithListOfSimpleVOResponse = response
    }
    methodWithAny(i: any): any {
        this.methodWithAnyCalls = this.methodWithAnyCalls + 1
        return this.methodWithAnyResponse
    }
    assertMethodWithAnyCalls(expectedNumber: number) {
        AssertEquals(this.methodWithAnyCalls, expectedNumber, "Expected 'methodWithAny' to be called " + expectedNumber + " times but was called " + this.methodWithAnyCalls + " times")
    }
    setMethodWithAnyResponse(response: any) {
        this.methodWithAnyResponse = response
    }
    methodReturningOptSimpleVo(): Optional<SomeId> {
        this.methodReturningOptSimpleVoCalls = this.methodReturningOptSimpleVoCalls + 1
        return Optional.of(this.methodReturningOptSimpleVoResponse).map(it => new SomeId(it))
    }
    assertMethodReturningOptSimpleVoCalls(expectedNumber: number) {
        AssertEquals(this.methodReturningOptSimpleVoCalls, expectedNumber, "Expected 'methodReturningOptSimpleVo' to be called " + expectedNumber + " times but was called " + this.methodReturningOptSimpleVoCalls + " times")
    }
    setMethodReturningOptSimpleVoResponse(response: string | undefined) {
        this.methodReturningOptSimpleVoResponse = response
    }
    reset() {
        this.someEmptyMethodCalls = 0
        this.someCommandCalls = 0
        this.someQueryCalls = 0
        this.optMethodCalls = 0
        this.methodWithListOfSimpleVOCalls = 0
        this.methodWithAnyCalls = 0
        this.methodReturningOptSimpleVoCalls = 0
    }
}

class SomeInterface2Mock implements SomeInterface2 {
    private referenceOtherClassCalls: number = 0
    private referenceOtherClassResponse: OtherModule.Builder.OtherClassDef = undefined
    private referenceLegacyTypeCalls: number = 0
    private referenceLegacyTypeResponse: LegacyType = undefined
    referenceOtherClass(other: OtherClass): OtherClass {
        this.referenceOtherClassCalls = this.referenceOtherClassCalls + 1
        return OtherModule.Builder.otherClass(this.referenceOtherClassResponse)
    }
    assertReferenceOtherClassCalls(expectedNumber: number) {
        AssertEquals(this.referenceOtherClassCalls, expectedNumber, "Expected 'referenceOtherClass' to be called " + expectedNumber + " times but was called " + this.referenceOtherClassCalls + " times")
    }
    setReferenceOtherClassResponse(response: OtherModule.Builder.OtherClassDef) {
        this.referenceOtherClassResponse = response
    }
    referenceLegacyType(legacyType: LegacyType): LegacyType {
        this.referenceLegacyTypeCalls = this.referenceLegacyTypeCalls + 1
        return TODO()
    }
    assertReferenceLegacyTypeCalls(expectedNumber: number) {
        AssertEquals(this.referenceLegacyTypeCalls, expectedNumber, "Expected 'referenceLegacyType' to be called " + expectedNumber + " times but was called " + this.referenceLegacyTypeCalls + " times")
    }
    setReferenceLegacyTypeResponse(response: LegacyType) {
        this.referenceLegacyTypeResponse = response
    }
    reset() {
        this.referenceOtherClassCalls = 0
        this.referenceLegacyTypeCalls = 0
    }
}

class SomeInterface3Mock implements SomeInterface3 {
    private referenceInterfaceCalls: number = 0
    private referenceInterfaceResponse: SomeEmptyInterface = undefined
    private referenceOtherInterfaceCalls: number = 0
    private referenceOtherInterfaceResponse: OtherInterface = undefined
    referenceInterface(empty: SomeEmptyInterface): SomeEmptyInterface {
        this.referenceInterfaceCalls = this.referenceInterfaceCalls + 1
        return TODO()
    }
    assertReferenceInterfaceCalls(expectedNumber: number) {
        AssertEquals(this.referenceInterfaceCalls, expectedNumber, "Expected 'referenceInterface' to be called " + expectedNumber + " times but was called " + this.referenceInterfaceCalls + " times")
    }
    setReferenceInterfaceResponse(response: SomeEmptyInterface) {
        this.referenceInterfaceResponse = response
    }
    referenceOtherInterface(other: OtherInterface): OtherInterface {
        this.referenceOtherInterfaceCalls = this.referenceOtherInterfaceCalls + 1
        return TODO()
    }
    assertReferenceOtherInterfaceCalls(expectedNumber: number) {
        AssertEquals(this.referenceOtherInterfaceCalls, expectedNumber, "Expected 'referenceOtherInterface' to be called " + expectedNumber + " times but was called " + this.referenceOtherInterfaceCalls + " times")
    }
    setReferenceOtherInterfaceResponse(response: OtherInterface) {
        this.referenceOtherInterfaceResponse = response
    }
    reset() {
        this.referenceInterfaceCalls = 0
        this.referenceOtherInterfaceCalls = 0
    }
}

class SomeModuleHandlersMock implements SomeModuleHandlers {
    private someHandlerCalls: number = 0
    private someHandlerResponse: SomeModule.Builder.SomeHandlerOutputDef = undefined
    private someHandler2Calls: number = 0
    private someHandler2Response: SomeModule.Builder.SomeHandlerOutputDef = undefined
    someHandler(i: SomeHandlerInput): SomeHandlerOutput {
        this.someHandlerCalls = this.someHandlerCalls + 1
        return SomeModule.Builder.someHandlerOutput(this.someHandlerResponse)
    }
    assertSomeHandlerCalls(expectedNumber: number) {
        AssertEquals(this.someHandlerCalls, expectedNumber, "Expected 'someHandler' to be called " + expectedNumber + " times but was called " + this.someHandlerCalls + " times")
    }
    setSomeHandlerResponse(response: SomeModule.Builder.SomeHandlerOutputDef) {
        this.someHandlerResponse = response
    }
    someHandler2(i: SomeHandlerInput): SomeHandlerOutput {
        this.someHandler2Calls = this.someHandler2Calls + 1
        return SomeModule.Builder.someHandlerOutput(this.someHandler2Response)
    }
    assertSomeHandler2Calls(expectedNumber: number) {
        AssertEquals(this.someHandler2Calls, expectedNumber, "Expected 'someHandler2' to be called " + expectedNumber + " times but was called " + this.someHandler2Calls + " times")
    }
    setSomeHandler2Response(response: SomeModule.Builder.SomeHandlerOutputDef) {
        this.someHandler2Response = response
    }
    reset() {
        this.someHandlerCalls = 0
        this.someHandler2Calls = 0
    }
}

class SomeModuleDebugHandlersMock implements SomeModuleDebugHandlers {
    private someDebugHandlerCalls: number = 0
    private someDebugHandlerResponse: SomeModule.Builder.SomeHandlerOutputDef = undefined
    private someDebugHandler2Calls: number = 0
    private someDebugHandler2Response: SomeModule.Builder.SomeHandlerOutputDef = undefined
    someDebugHandler(i: SomeHandlerInput): SomeHandlerOutput {
        this.someDebugHandlerCalls = this.someDebugHandlerCalls + 1
        return SomeModule.Builder.someHandlerOutput(this.someDebugHandlerResponse)
    }
    assertSomeDebugHandlerCalls(expectedNumber: number) {
        AssertEquals(this.someDebugHandlerCalls, expectedNumber, "Expected 'someDebugHandler' to be called " + expectedNumber + " times but was called " + this.someDebugHandlerCalls + " times")
    }
    setSomeDebugHandlerResponse(response: SomeModule.Builder.SomeHandlerOutputDef) {
        this.someDebugHandlerResponse = response
    }
    someDebugHandler2(i: SomeHandlerInput): SomeHandlerOutput {
        this.someDebugHandler2Calls = this.someDebugHandler2Calls + 1
        return SomeModule.Builder.someHandlerOutput(this.someDebugHandler2Response)
    }
    assertSomeDebugHandler2Calls(expectedNumber: number) {
        AssertEquals(this.someDebugHandler2Calls, expectedNumber, "Expected 'someDebugHandler2' to be called " + expectedNumber + " times but was called " + this.someDebugHandler2Calls + " times")
    }
    setSomeDebugHandler2Response(response: SomeModule.Builder.SomeHandlerOutputDef) {
        this.someDebugHandler2Response = response
    }
    reset() {
        this.someDebugHandlerCalls = 0
        this.someDebugHandler2Calls = 0
    }
}

namespace SomeModule.Mocks {
    export function createSomeEmptyInterfaceMock(): SomeEmptyInterfaceMock {
        return new SomeEmptyInterfaceMock()
    }

    export function setupSomeEmptyInterface(): SomeEmptyInterfaceMock {
        const mock = SomeModule.Mocks.createSomeEmptyInterfaceMock()
        return mock
    }

    export function createSomeInterfaceMock(): SomeInterfaceMock {
        return new SomeInterfaceMock()
    }

    export function setupSomeInterface(): SomeInterfaceMock {
        const mock = SomeModule.Mocks.createSomeInterfaceMock()
        SomeModule.Api.someEmptyMethod = CreateMock(SomeModule.Api.someEmptyMethod, () => { mock.someEmptyMethod() })
        SomeModule.Api.someCommand = CreateMock(SomeModule.Api.someCommand, (id: SomeId, amount: number) => { mock.someCommand(id, amount) })
        SomeModule.Api.someQuery = CreateMock(SomeModule.Api.someQuery, (query: SomeQueryInput) => { return mock.someQuery(query) })
        SomeModule.Api.optMethod = CreateMock(SomeModule.Api.optMethod, (optId: Optional<SomeId>) => { return mock.optMethod(optId) })
        SomeModule.Api.methodWithListOfSimpleVO = CreateMock(SomeModule.Api.methodWithListOfSimpleVO, (list: SomeId[]) => { return mock.methodWithListOfSimpleVO(list) })
        SomeModule.Api.methodWithAny = CreateMock(SomeModule.Api.methodWithAny, (i: any) => { return mock.methodWithAny(i) })
        SomeModule.Api.methodReturningOptSimpleVo = CreateMock(SomeModule.Api.methodReturningOptSimpleVo, () => { return mock.methodReturningOptSimpleVo() })
        return mock
    }

    export function createSomeInterface2Mock(): SomeInterface2Mock {
        return new SomeInterface2Mock()
    }

    export function setupSomeInterface2(): SomeInterface2Mock {
        const mock = SomeModule.Mocks.createSomeInterface2Mock()
        SomeModule.Api.referenceOtherClass = CreateMock(SomeModule.Api.referenceOtherClass, (other: OtherClass) => { return mock.referenceOtherClass(other) })
        SomeModule.Api.referenceLegacyType = CreateMock(SomeModule.Api.referenceLegacyType, (legacyType: LegacyType) => { return mock.referenceLegacyType(legacyType) })
        return mock
    }

    export function createSomeInterface3Mock(): SomeInterface3Mock {
        return new SomeInterface3Mock()
    }

    export function setupSomeInterface3(): SomeInterface3Mock {
        const mock = SomeModule.Mocks.createSomeInterface3Mock()
        SomeModule.Api.referenceInterface = CreateMock(SomeModule.Api.referenceInterface, (empty: SomeEmptyInterface) => { return mock.referenceInterface(empty) })
        SomeModule.Api.referenceOtherInterface = CreateMock(SomeModule.Api.referenceOtherInterface, (other: OtherInterface) => { return mock.referenceOtherInterface(other) })
        return mock
    }

    export function createSomeModuleHandlersMock(): SomeModuleHandlersMock {
        return new SomeModuleHandlersMock()
    }

    export function setupSomeModuleHandlers(): SomeModuleHandlersMock {
        const mock = SomeModule.Mocks.createSomeModuleHandlersMock()
        SomeModule.Api.someHandler = CreateMock(SomeModule.Api.someHandler, (i: SomeHandlerInput) => { return mock.someHandler(i) })
        SomeModule.Api.someHandler2 = CreateMock(SomeModule.Api.someHandler2, (i: SomeHandlerInput) => { return mock.someHandler2(i) })
        return mock
    }

    export function createSomeModuleDebugHandlersMock(): SomeModuleDebugHandlersMock {
        return new SomeModuleDebugHandlersMock()
    }

    export function setupSomeModuleDebugHandlers(): SomeModuleDebugHandlersMock {
        const mock = SomeModule.Mocks.createSomeModuleDebugHandlersMock()
        SomeModule.Api.someDebugHandler = CreateMock(SomeModule.Api.someDebugHandler, (i: SomeHandlerInput) => { return mock.someDebugHandler(i) })
        SomeModule.Api.someDebugHandler2 = CreateMock(SomeModule.Api.someDebugHandler2, (i: SomeHandlerInput) => { return mock.someDebugHandler2(i) })
        return mock
    }
}