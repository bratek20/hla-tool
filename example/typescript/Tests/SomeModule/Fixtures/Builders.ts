// DO NOT EDIT! Autogenerated by HLA tool

namespace SomeModule.Builder {
    export function someId(value: string = "someValue"): SomeId {
        return new SomeId(value)
    }

    export function someOtherId(value: string = "someValue"): SomeOtherId {
        return new SomeOtherId(value)
    }

    export function someIntWrapper(value: number = 5): SomeIntWrapper {
        return new SomeIntWrapper(value)
    }

    export function someId2(value: number = 0): SomeId2 {
        return new SomeId2(value)
    }

    export interface SomeClassDef {
        id?: string,
        amount?: number,
    }
    export function someClass(def?: SomeClassDef): SomeClass {
        const final_id = def?.id ?? "someValue"
        const final_amount = def?.amount ?? 10

        return SomeClass.create(
            new SomeId(final_id),
            final_amount,
        )
    }

    export interface SomeClass2Def {
        id?: string,
        names?: string[],
        ids?: string[],
        enabled?: boolean,
    }
    export function someClass2(def?: SomeClass2Def): SomeClass2 {
        const final_id = def?.id ?? "someValue"
        const final_names = def?.names ?? []
        const final_ids = def?.ids ?? []
        const final_enabled = def?.enabled ?? true

        return SomeClass2.create(
            new SomeId(final_id),
            final_names,
            final_ids.map(it => new SomeId(it)),
            final_enabled,
        )
    }

    export interface SomeClass3Def {
        class2Object?: SomeModule.Builder.SomeClass2Def,
        someEnum?: string,
        class2List?: SomeModule.Builder.SomeClass2Def[],
    }
    export function someClass3(def?: SomeClass3Def): SomeClass3 {
        const final_class2Object = def?.class2Object ?? {}
        const final_someEnum = def?.someEnum ?? SomeEnum.VALUE_A.getName()
        const final_class2List = def?.class2List ?? []

        return SomeClass3.create(
            SomeModule.Builder.someClass2(final_class2Object),
            SomeEnum.fromName(final_someEnum),
            final_class2List.map(it => SomeModule.Builder.someClass2(it)),
        )
    }

    export interface SomeClass4Def {
        otherId?: number,
        otherClass?: OtherModule.Builder.OtherClassDef,
        otherIdList?: number[],
        otherClassList?: OtherModule.Builder.OtherClassDef[],
    }
    export function someClass4(def?: SomeClass4Def): SomeClass4 {
        const final_otherId = def?.otherId ?? 0
        const final_otherClass = def?.otherClass ?? {}
        const final_otherIdList = def?.otherIdList ?? []
        const final_otherClassList = def?.otherClassList ?? []

        return SomeClass4.create(
            new OtherId(final_otherId),
            OtherModule.Builder.otherClass(final_otherClass),
            final_otherIdList.map(it => new OtherId(it)),
            final_otherClassList.map(it => OtherModule.Builder.otherClass(it)),
        )
    }

    export interface SomeClass5Def {
        date?: string,
        dateRange?: TypesModule.Builder.DateRangeDef,
        dateRangeWrapper?: SomeModule.Builder.DateRangeWrapperDef,
        someProperty?: SomeModule.Builder.SomePropertyDef,
        otherProperty?: OtherModule.Builder.OtherPropertyDef,
    }
    export function someClass5(def?: SomeClass5Def): SomeClass5 {
        const final_date = def?.date ?? "01/01/1970 00:00"
        const final_dateRange = def?.dateRange ?? {}
        const final_dateRangeWrapper = def?.dateRangeWrapper ?? {}
        const final_someProperty = def?.someProperty ?? {}
        const final_otherProperty = def?.otherProperty ?? {}

        return SomeClass5.create(
            TypesModule.CustomTypesMapper.dateCreate(final_date),
            TypesModule.Builder.dateRange(final_dateRange),
            SomeModule.Builder.dateRangeWrapper(final_dateRangeWrapper),
            SomeModule.Builder.someProperty(final_someProperty),
            OtherModule.Builder.otherProperty(final_otherProperty),
        )
    }

    export interface SomeClass6Def {
        someClassOpt?: SomeModule.Builder.SomeClassDef,
        optString?: string,
        class2List?: SomeModule.Builder.SomeClass2Def[],
        sameClassList?: SomeModule.Builder.SomeClass6Def[],
    }
    export function someClass6(def?: SomeClass6Def): SomeClass6 {
        const final_someClassOpt = def?.someClassOpt ?? undefined
        const final_optString = def?.optString ?? undefined
        const final_class2List = def?.class2List ?? []
        const final_sameClassList = def?.sameClassList ?? []

        return SomeClass6.create(
            Optional.of(final_someClassOpt).map(it => SomeModule.Builder.someClass(it)),
            Optional.of(final_optString),
            final_class2List.map(it => SomeModule.Builder.someClass2(it)),
            final_sameClassList.map(it => SomeModule.Builder.someClass6(it)),
        )
    }

    export interface ClassHavingOptListDef {
        optList?: SomeModule.Builder.SomeClassDef[],
    }
    export function classHavingOptList(def?: ClassHavingOptListDef): ClassHavingOptList {
        const final_optList = def?.optList ?? undefined

        return ClassHavingOptList.create(
            Optional.of(final_optList).map(it => it.map(it => SomeModule.Builder.someClass(it))),
        )
    }

    export interface ClassHavingOptSimpleVoDef {
        optSimpleVo?: string,
    }
    export function classHavingOptSimpleVo(def?: ClassHavingOptSimpleVoDef): ClassHavingOptSimpleVo {
        const final_optSimpleVo = def?.optSimpleVo ?? undefined

        return ClassHavingOptSimpleVo.create(
            Optional.of(final_optSimpleVo).map(it => new SomeId(it)),
        )
    }

    export interface RecordClassDef {
        id?: string,
        amount?: number,
    }
    export function recordClass(def?: RecordClassDef): RecordClass {
        const final_id = def?.id ?? "someValue"
        const final_amount = def?.amount ?? 0

        return RecordClass.create(
            new SomeId(final_id),
            final_amount,
        )
    }

    export interface ClassWithOptExamplesDef {
        optInt?: number,
        optIntWrapper?: number,
    }
    export function classWithOptExamples(def?: ClassWithOptExamplesDef): ClassWithOptExamples {
        const final_optInt = def?.optInt ?? 1
        const final_optIntWrapper = def?.optIntWrapper ?? 2

        return ClassWithOptExamples.create(
            Optional.of(final_optInt),
            Optional.of(final_optIntWrapper).map(it => new SomeIntWrapper(it)),
        )
    }

    export interface ClassWithEnumListDef {
        enumList?: string[],
    }
    export function classWithEnumList(def?: ClassWithEnumListDef): ClassWithEnumList {
        const final_enumList = def?.enumList ?? []

        return ClassWithEnumList.create(
            final_enumList.map(it => SomeEnum2.fromName(it)),
        )
    }

    export interface ClassWithBoolFieldDef {
        boolField?: boolean,
    }
    export function classWithBoolField(def?: ClassWithBoolFieldDef): ClassWithBoolField {
        const final_boolField = def?.boolField ?? false

        return ClassWithBoolField.create(
            final_boolField,
        )
    }

    export interface RecursiveClassDef {
        meList?: SomeModule.Builder.RecursiveClassDef[],
        meOpt?: SomeModule.Builder.RecursiveClassDef,
        meOptList?: SomeModule.Builder.RecursiveClassDef[],
    }
    export function recursiveClass(def?: RecursiveClassDef): RecursiveClass {
        const final_meList = def?.meList ?? []
        const final_meOpt = def?.meOpt ?? undefined
        const final_meOptList = def?.meOptList ?? undefined

        return RecursiveClass.create(
            final_meList.map(it => SomeModule.Builder.recursiveClass(it)),
            Optional.of(final_meOpt).map(it => SomeModule.Builder.recursiveClass(it)),
            Optional.of(final_meOptList).map(it => it.map(it => SomeModule.Builder.recursiveClass(it))),
        )
    }

    export interface SomeQueryInputDef {
        id?: string,
        amount?: number,
    }
    export function someQueryInput(def?: SomeQueryInputDef): SomeQueryInput {
        const final_id = def?.id ?? "someValue"
        const final_amount = def?.amount ?? 0

        return SomeQueryInput.create(
            new SomeId(final_id),
            final_amount,
        )
    }

    export interface SomeHandlerInputDef {
        id?: string,
        amount?: number,
    }
    export function someHandlerInput(def?: SomeHandlerInputDef): SomeHandlerInput {
        const final_id = def?.id ?? "someValue"
        const final_amount = def?.amount ?? 0

        return SomeHandlerInput.create(
            new SomeId(final_id),
            final_amount,
        )
    }

    export interface SomeHandlerOutputDef {
        id?: string,
        amount?: number,
    }
    export function someHandlerOutput(def?: SomeHandlerOutputDef): SomeHandlerOutput {
        const final_id = def?.id ?? "someValue"
        const final_amount = def?.amount ?? 0

        return SomeHandlerOutput.create(
            new SomeId(final_id),
            final_amount,
        )
    }

    export interface SomePropertyDef {
        other?: OtherModule.Builder.OtherPropertyDef,
        id2?: number,
        range?: TypesModule.Builder.DateRangeDef,
        doubleExample?: number,
        longExample?: number,
        goodName?: string,
        customData?: any,
    }
    export function someProperty(def?: SomePropertyDef): SomeProperty {
        const final_other = def?.other ?? {}
        const final_id2 = def?.id2 ?? undefined
        const final_range = def?.range ?? undefined
        const final_doubleExample = def?.doubleExample ?? 0
        const final_longExample = def?.longExample ?? 0
        const final_goodName = def?.goodName ?? "someValue"
        const final_customData = def?.customData ?? {}

        return SomeProperty.create(
            OtherModule.Builder.otherProperty(final_other),
            Optional.of(final_id2).map(it => new SomeId2(it)),
            Optional.of(final_range).map(it => TypesModule.Builder.dateRange(it)),
            final_doubleExample,
            final_longExample,
            final_goodName,
            final_customData,
        )
    }

    export interface SomeProperty2Def {
        value?: string,
        custom?: any,
        someEnum?: string,
        customOpt?: any,
    }
    export function someProperty2(def?: SomeProperty2Def): SomeProperty2 {
        const final_value = def?.value ?? "someValue"
        const final_custom = def?.custom ?? {}
        const final_someEnum = def?.someEnum ?? SomeEnum.VALUE_A.getName()
        const final_customOpt = def?.customOpt ?? undefined

        return SomeProperty2.create(
            final_value,
            final_custom,
            SomeEnum.fromName(final_someEnum),
            Optional.of(final_customOpt),
        )
    }

    export interface SomePropertyEntryDef {
        id?: string,
    }
    export function somePropertyEntry(def?: SomePropertyEntryDef): SomePropertyEntry {
        const final_id = def?.id ?? "someValue"

        return SomePropertyEntry.create(
            new SomeId(final_id),
        )
    }

    export interface SomeRenamedSourcePropertyEntryDef {
        id?: string,
    }
    export function someRenamedSourcePropertyEntry(def?: SomeRenamedSourcePropertyEntryDef): SomeRenamedSourcePropertyEntry {
        const final_id = def?.id ?? "someValue"

        return SomeRenamedSourcePropertyEntry.create(
            new SomeOtherId(final_id),
        )
    }

    export interface SomeReferencingPropertyDef {
        referenceId?: string,
    }
    export function someReferencingProperty(def?: SomeReferencingPropertyDef): SomeReferencingProperty {
        const final_referenceId = def?.referenceId ?? "someValue"

        return SomeReferencingProperty.create(
            new SomeId(final_referenceId),
        )
    }

    export interface SomeRenamedReferencingPropertyDef {
        referenceId?: string,
    }
    export function someRenamedReferencingProperty(def?: SomeRenamedReferencingPropertyDef): SomeRenamedReferencingProperty {
        const final_referenceId = def?.referenceId ?? "someValue"

        return SomeRenamedReferencingProperty.create(
            new SomeId(final_referenceId),
        )
    }

    export interface SomeRenamedReferencingRenamedPropertyDef {
        referenceId?: string,
    }
    export function someRenamedReferencingRenamedProperty(def?: SomeRenamedReferencingRenamedPropertyDef): SomeRenamedReferencingRenamedProperty {
        const final_referenceId = def?.referenceId ?? "someValue"

        return SomeRenamedReferencingRenamedProperty.create(
            new SomeOtherId(final_referenceId),
        )
    }

    export interface SomeReferencingPropertyFieldListDef {
        referenceIdList?: string[],
    }
    export function someReferencingPropertyFieldList(def?: SomeReferencingPropertyFieldListDef): SomeReferencingPropertyFieldList {
        const final_referenceIdList = def?.referenceIdList ?? []

        return SomeReferencingPropertyFieldList.create(
            final_referenceIdList.map(it => new SomeId(it)),
        )
    }

    export interface SomeStructureWithUniqueIdsDef {
        entries?: SimpleModule.Builder.UniqueIdEntryDef[],
    }
    export function someStructureWithUniqueIds(def?: SomeStructureWithUniqueIdsDef): SomeStructureWithUniqueIds {
        const final_entries = def?.entries ?? []

        return SomeStructureWithUniqueIds.create(
            final_entries.map(it => SimpleModule.Builder.uniqueIdEntry(it)),
        )
    }

    export interface NestedUniqueIdsDef {
        entries?: SimpleModule.Builder.UniqueIdEntryDef[],
    }
    export function nestedUniqueIds(def?: NestedUniqueIdsDef): NestedUniqueIds {
        const final_entries = def?.entries ?? []

        return NestedUniqueIds.create(
            final_entries.map(it => SimpleModule.Builder.uniqueIdEntry(it)),
        )
    }

    export interface SomeStructureWithUniqueNestedIdsDef {
        nestedUniqueIds?: SomeModule.Builder.NestedUniqueIdsDef[],
    }
    export function someStructureWithUniqueNestedIds(def?: SomeStructureWithUniqueNestedIdsDef): SomeStructureWithUniqueNestedIds {
        const final_nestedUniqueIds = def?.nestedUniqueIds ?? []

        return SomeStructureWithUniqueNestedIds.create(
            final_nestedUniqueIds.map(it => SomeModule.Builder.nestedUniqueIds(it)),
        )
    }

    export interface SomeStructureWithMultipleUniqueNestedIdsDef {
        moreNestedFields?: SomeModule.Builder.SomeStructureWithUniqueNestedIdsDef[],
    }
    export function someStructureWithMultipleUniqueNestedIds(def?: SomeStructureWithMultipleUniqueNestedIdsDef): SomeStructureWithMultipleUniqueNestedIds {
        const final_moreNestedFields = def?.moreNestedFields ?? []

        return SomeStructureWithMultipleUniqueNestedIds.create(
            final_moreNestedFields.map(it => SomeModule.Builder.someStructureWithUniqueNestedIds(it)),
        )
    }

    export interface SomeClassWIthOtherClassUniqueIdsDef {
        otherClass?: OtherModule.Builder.OtherClassWIthUniqueIdDef,
    }
    export function someClassWIthOtherClassUniqueIds(def?: SomeClassWIthOtherClassUniqueIdsDef): SomeClassWIthOtherClassUniqueIds {
        const final_otherClass = def?.otherClass ?? {}

        return SomeClassWIthOtherClassUniqueIds.create(
            OtherModule.Builder.otherClassWIthUniqueId(final_otherClass),
        )
    }

    export interface SomeStructWithNestedOtherClassUniqueIdsDef {
        someNestedWithUniqueIds?: SomeModule.Builder.SomeClassWIthOtherClassUniqueIdsDef[],
    }
    export function someStructWithNestedOtherClassUniqueIds(def?: SomeStructWithNestedOtherClassUniqueIdsDef): SomeStructWithNestedOtherClassUniqueIds {
        const final_someNestedWithUniqueIds = def?.someNestedWithUniqueIds ?? []

        return SomeStructWithNestedOtherClassUniqueIds.create(
            final_someNestedWithUniqueIds.map(it => SomeModule.Builder.someClassWIthOtherClassUniqueIds(it)),
        )
    }

    export interface NestedClassLevel2Def {
        uniqueIds?: OtherModule.Builder.OtherClassWIthUniqueIdDef[],
    }
    export function nestedClassLevel2(def?: NestedClassLevel2Def): NestedClassLevel2 {
        const final_uniqueIds = def?.uniqueIds ?? []

        return NestedClassLevel2.create(
            final_uniqueIds.map(it => OtherModule.Builder.otherClassWIthUniqueId(it)),
        )
    }

    export interface NestedClassLevel1Def {
        nestLevel2?: SomeModule.Builder.NestedClassLevel2Def[],
    }
    export function nestedClassLevel1(def?: NestedClassLevel1Def): NestedClassLevel1 {
        const final_nestLevel2 = def?.nestLevel2 ?? []

        return NestedClassLevel1.create(
            final_nestLevel2.map(it => SomeModule.Builder.nestedClassLevel2(it)),
        )
    }

    export interface ComplexStructureWithNestedUniqueIdsDef {
        id?: string,
        nestLevel1?: SomeModule.Builder.NestedClassLevel1Def[],
    }
    export function complexStructureWithNestedUniqueIds(def?: ComplexStructureWithNestedUniqueIdsDef): ComplexStructureWithNestedUniqueIds {
        const final_id = def?.id ?? "someValue"
        const final_nestLevel1 = def?.nestLevel1 ?? []

        return ComplexStructureWithNestedUniqueIds.create(
            final_id,
            final_nestLevel1.map(it => SomeModule.Builder.nestedClassLevel1(it)),
        )
    }

    export interface NestedValueDef {
        value?: string,
    }
    export function nestedValue(def?: NestedValueDef): NestedValue {
        const final_value = def?.value ?? "someValue"

        return NestedValue.create(
            final_value,
        )
    }

    export interface OptionalFieldPropertyDef {
        optionalField?: SomeModule.Builder.NestedValueDef,
    }
    export function optionalFieldProperty(def?: OptionalFieldPropertyDef): OptionalFieldProperty {
        const final_optionalField = def?.optionalField ?? undefined

        return OptionalFieldProperty.create(
            Optional.of(final_optionalField).map(it => SomeModule.Builder.nestedValue(it)),
        )
    }

    export interface CustomTypesPropertyDef {
        date?: string,
        dateRange?: TypesModule.Builder.DateRangeDef,
    }
    export function customTypesProperty(def?: CustomTypesPropertyDef): CustomTypesProperty {
        const final_date = def?.date ?? "01/01/1970 00:00"
        const final_dateRange = def?.dateRange ?? {}

        return CustomTypesProperty.create(
            TypesModule.CustomTypesMapper.dateCreate(final_date),
            TypesModule.Builder.dateRange(final_dateRange),
        )
    }

    export interface SelfReferencingPropertyDef {
        optionalSelf?: SomeModule.Builder.SelfReferencingPropertyDef,
        listSelf?: SomeModule.Builder.SelfReferencingPropertyDef[],
        optionalListSelf?: SomeModule.Builder.SelfReferencingPropertyDef[],
    }
    export function selfReferencingProperty(def?: SelfReferencingPropertyDef): SelfReferencingProperty {
        const final_optionalSelf = def?.optionalSelf ?? undefined
        const final_listSelf = def?.listSelf ?? []
        const final_optionalListSelf = def?.optionalListSelf ?? undefined

        return SelfReferencingProperty.create(
            Optional.of(final_optionalSelf).map(it => SomeModule.Builder.selfReferencingProperty(it)),
            final_listSelf.map(it => SomeModule.Builder.selfReferencingProperty(it)),
            Optional.of(final_optionalListSelf).map(it => it.map(it => SomeModule.Builder.selfReferencingProperty(it))),
        )
    }

    export interface DateRangeWrapperDef {
        range?: TypesModule.Builder.DateRangeDef,
    }
    export function dateRangeWrapper(def?: DateRangeWrapperDef): DateRangeWrapper {
        const final_range = def?.range ?? {}

        return SomeModule.CustomTypesMapper.dateRangeWrapperCreate(
            TypesModule.Builder.dateRange(final_range),
        )
    }

    export interface SomeDataDef {
        id?: string,
        other?: OtherModule.Builder.OtherDataDef,
        custom?: any,
        customOpt?: any,
        goodDataName?: string,
    }
    export function someData(def?: SomeDataDef): SomeData {
        const final_id = def?.id ?? "someValue"
        const final_other = def?.other ?? {}
        const final_custom = def?.custom ?? {}
        const final_customOpt = def?.customOpt ?? undefined
        const final_goodDataName = def?.goodDataName ?? "someValue"

        return SomeData.create(
            new SomeId(final_id),
            OtherModule.Builder.otherData(final_other),
            final_custom,
            Optional.of(final_customOpt),
            final_goodDataName,
        )
    }

    export interface SomeData2Def {
        optEnum?: string,
        optCustomType?: string,
    }
    export function someData2(def?: SomeData2Def): SomeData2 {
        const final_optEnum = def?.optEnum ?? undefined
        const final_optCustomType = def?.optCustomType ?? undefined

        return SomeData2.create(
            Optional.of(final_optEnum).map(it => SomeEnum.fromName(it)),
            Optional.of(final_optCustomType).map(it => TypesModule.CustomTypesMapper.dateCreate(it)),
        )
    }

    export interface SomeEventDef {
        someField?: string,
        otherClass?: OtherModule.Builder.OtherClassDef,
        optField?: string,
    }
    export function someEvent(def?: SomeEventDef): SomeEvent {
        const final_someField = def?.someField ?? "someValue"
        const final_otherClass = def?.otherClass ?? {}
        const final_optField = def?.optField ?? undefined

        return SomeEvent.create(
            final_someField,
            OtherModule.Builder.otherClass(final_otherClass),
            Optional.of(final_optField),
        )
    }
}