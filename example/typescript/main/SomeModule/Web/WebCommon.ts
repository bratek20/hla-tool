// DO NOT EDIT! Autogenerated by HLA tool

namespace SomeModule.Web {
    export class SomeInterfaceSomeCommandRequest {
        constructor(
            private readonly id: string,
            private readonly amount: number,
        ) {}
        getId(): SomeId {
            return new SomeId(id)
        }
        getAmount(): number {
            return amount
        }
        static create(id: SomeId, amount: number): SomeInterfaceSomeCommandRequest {
            return SomeInterfaceSomeCommandRequest(id.value, amount)
        }
    }
    export class SomeInterfaceSomeQueryRequest {
        constructor(
            private readonly query: SomeQueryInput,
        ) {}
        getQuery(): SomeQueryInput {
            return query
        }
        static create(query: SomeQueryInput): SomeInterfaceSomeQueryRequest {
            return SomeInterfaceSomeQueryRequest(query)
        }
    }
    export class SomeInterfaceSomeQueryResponse {
        constructor(
            readonly value: SomeClass,
        ) {}
    }
    export class SomeInterfaceOptMethodRequest {
        constructor(
            private readonly optId: Optional<string>,
        ) {}
        getOptId(): Optional<SomeId> {
            return Optional.of(optId).map(it => new SomeId(it))
        }
        static create(optId: Optional<SomeId>): SomeInterfaceOptMethodRequest {
            return SomeInterfaceOptMethodRequest(optId.map(it => it.value).orElse(undefined))
        }
    }
    export class SomeInterfaceOptMethodResponse {
        constructor(
            readonly value: Optional<SomeClass>,
        ) {}
    }
    export class SomeInterface2ReferenceOtherClassRequest {
        constructor(
            private readonly other: OtherClass,
        ) {}
        getOther(): OtherClass {
            return other
        }
        static create(other: OtherClass): SomeInterface2ReferenceOtherClassRequest {
            return SomeInterface2ReferenceOtherClassRequest(other)
        }
    }
    export class SomeInterface2ReferenceOtherClassResponse {
        constructor(
            readonly value: OtherClass,
        ) {}
    }
    export class SomeInterface2ReferenceLegacyTypeRequest {
        constructor(
            private readonly legacyType: LegacyType,
        ) {}
        getLegacyType(): LegacyType {
            return legacyType
        }
        static create(legacyType: LegacyType): SomeInterface2ReferenceLegacyTypeRequest {
            return SomeInterface2ReferenceLegacyTypeRequest(legacyType)
        }
    }
    export class SomeInterface2ReferenceLegacyTypeResponse {
        constructor(
            readonly value: LegacyType,
        ) {}
    }
}