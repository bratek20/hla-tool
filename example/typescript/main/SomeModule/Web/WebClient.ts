// DO NOT EDIT! Autogenerated by HLA tool

class SomeInterfaceWebClient implements SomeInterface {
    private readonly client: HttpClient

    constructor(config: SomeModuleWebClientConfig, c: HandlerContext) {
        this.client = HttpClient.Api.create(config.value, c);
    }

    override someEmptyMethod(): void {
        client.post("/someInterface/someEmptyMethod", null)
    }

    override someCommand(id: SomeId, amount: number): void {
        client.post("/someInterface/someCommand", SomeInterfaceSomeCommandRequest.create(id, amount))
    }

    override someQuery(query: SomeQueryInput): SomeClass {
        return client.post("/someInterface/someQuery", SomeInterfaceSomeQueryRequest.create(query)).getBody(SomeInterfaceSomeQueryResponse).value
    }

    override optMethod(optId: Optional<SomeId>): Optional<SomeClass> {
        return client.post("/someInterface/optMethod", SomeInterfaceOptMethodRequest.create(optId)).getBody(SomeInterfaceOptMethodResponse).value
    }
}

class SomeInterface2WebClient(
    factory: HttpClientFactory,
    config: SomeModuleWebClientConfig,
): SomeInterface2 {
private val client = factory.create(config.value)

    override fun referenceOtherClass(other: OtherClass): OtherClass {
        return client.post("/someInterface2/referenceOtherClass", SomeInterface2ReferenceOtherClassRequest(other)).getBody(SomeInterface2ReferenceOtherClassResponse::class.java).value
    }

    override fun referenceLegacyType(legacyType: com.some.pkg.legacy.LegacyType): com.some.pkg.legacy.LegacyType {
        return client.post("/someInterface2/referenceLegacyType", SomeInterface2ReferenceLegacyTypeRequest(legacyType)).getBody(SomeInterface2ReferenceLegacyTypeResponse::class.java).value
    }
}