// DO NOT EDIT! Autogenerated by HLA tool

class SimpleId {
    constructor(
        readonly valueSimpleId: string
    ) {}

    getValue(): string {
        return this.valueSimpleId
    }

    equals(other: SimpleId): boolean {
        return this.getValue() === other.getValue()
    }

    toString(): string {
        return this.getValue().toString()
    }
}

class SomeLongWrapper {
    constructor(
        readonly valueSomeLongWrapper: number
    ) {}

    getValue(): number {
        return this.valueSomeLongWrapper
    }

    equals(other: SomeLongWrapper): boolean {
        return this.getValue() === other.getValue()
    }

    toString(): string {
        return this.getValue().toString()
    }

    plus(other: SomeLongWrapper): SomeLongWrapper {
        return new SomeLongWrapper(this.getValue() + other.getValue());
    }

    minus(other: SomeLongWrapper): SomeLongWrapper {
        return new SomeLongWrapper(this.getValue() - other.getValue());
    }

    times(amount: number): SomeLongWrapper {
        return new SomeLongWrapper(this.getValue() * amount);
    }
}

class UniqueIdEntry {
    private id = STRING

    static create(
        id: string,
    ): UniqueIdEntry {
        const instance = new UniqueIdEntry()
        instance.id = id
        return instance
    }

    static createNamed({
        id,
    }: {
        id: string;
    }): UniqueIdEntry {
        const instance = new UniqueIdEntry()
        instance.id = id
        return instance
    }

    getId(): string {
        return this.id
    }
}