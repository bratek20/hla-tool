// DO NOT EDIT! Autogenerated by HLA tool

package com.some.pkg.somemodule.web

import com.github.bratek20.infrastructure.httpclient.api.HttpClientFactory

import com.some.pkg.somemodule.api.*

import com.some.pkg.othermodule.api.*
import com.some.pkg.typesmodule.api.*

class SomeInterfaceWebClient(
    factory: HttpClientFactory,
    config: SomeModuleWebClientConfig,
): SomeInterface {
    private val client = factory.create(config.value)

    override fun someEmptyMethod(): Unit {
        client.post("/someInterface/someEmptyMethod", null)
    }

    override fun someCommand(id: SomeId, amount: Int): Unit {
        client.post("/someInterface/someCommand", SomeInterfaceSomeCommandRequest.create(id, amount))
    }

    override fun someQuery(query: SomeQueryInput): SomeClass {
        return client.post("/someInterface/someQuery", SomeInterfaceSomeQueryRequest(query)).getBody(SomeInterfaceSomeQueryResponse::class.java).value
    }

    override fun optMethod(optId: SomeId?): SomeClass? {
        return client.post("/someInterface/optMethod", SomeInterfaceOptMethodRequest(optId)).getBody(SomeInterfaceOptMethodResponse::class.java).value
    }
}

class SomeInterface2WebClient(
    factory: HttpClientFactory,
    config: SomeModuleWebClientConfig,
): SomeInterface2 {
    private val client = factory.create(config.value)

    override fun referenceOtherClass(other: OtherClass): OtherClass {
        return client.post("/someInterface2/referenceOtherClass", SomeInterface2ReferenceOtherClassRequest(other)).getBody(SomeInterface2ReferenceOtherClassResponse::class.java).value
    }

    override fun referenceLegacyType(legacyType: com.some.pkg.legacy.LegacyType): com.some.pkg.legacy.LegacyType {
        return client.post("/someInterface2/referenceLegacyType", SomeInterface2ReferenceLegacyTypeRequest(legacyType)).getBody(SomeInterface2ReferenceLegacyTypeResponse::class.java).value
    }
}

