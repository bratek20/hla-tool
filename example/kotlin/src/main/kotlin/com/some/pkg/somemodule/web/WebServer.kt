// DO NOT EDIT! Autogenerated by HLA tool

package com.some.pkg.somemodule.web

import com.github.bratek20.architecture.serialization.api.Serializer
import com.github.bratek20.architecture.serialization.api.Struct
import com.github.bratek20.architecture.serialization.context.SerializationFactory

import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

import com.some.pkg.somemodule.api.*

@RestController
@RequestMapping("/some/prefix/someInterface")
class SomeInterfaceController(
    private val api: SomeInterface,
) {
    private val serializer: Serializer = SerializationFactory.createSerializer()

    @PostMapping("/someEmptyMethod")
    fun someEmptyMethod(): Unit {
        // no request needed
        api.someEmptyMethod()
    }

    @PostMapping("/someCommand")
    fun someCommand(@RequestBody rawRequest: Struct): Unit {
        val request = serializer.fromStruct(rawRequest, SomeInterfaceSomeCommandRequest::class.java)
        api.someCommand(request.getId(), request.getAmount())
    }

    @PostMapping("/someQuery")
    fun someQuery(@RequestBody rawRequest: Struct): Struct {
        val request = serializer.fromStruct(rawRequest, SomeInterfaceSomeQueryRequest::class.java)
        return serializer.asStruct(SomeInterfaceSomeQueryResponse(api.someQuery(request.getQuery())))
    }

    @PostMapping("/optMethod")
    fun optMethod(@RequestBody rawRequest: Struct): Struct {
        val request = serializer.fromStruct(rawRequest, SomeInterfaceOptMethodRequest::class.java)
        return serializer.asStruct(SomeInterfaceOptMethodResponse(api.optMethod(request.getOptId())))
    }

    @PostMapping("/methodWithListOfSimpleVO")
    fun methodWithListOfSimpleVO(@RequestBody rawRequest: Struct): Struct {
        val request = serializer.fromStruct(rawRequest, SomeInterfaceMethodWithListOfSimpleVORequest::class.java)
        return serializer.asStruct(SomeInterfaceMethodWithListOfSimpleVOResponse(api.methodWithListOfSimpleVO(request.getList())))
    }
}

@RestController
@RequestMapping("/some/prefix/someInterface2")
class SomeInterface2Controller(
    private val api: SomeInterface2,
) {
    private val serializer: Serializer = SerializationFactory.createSerializer()

    @PostMapping("/referenceOtherClass")
    fun referenceOtherClass(@RequestBody rawRequest: Struct): Struct {
        val request = serializer.fromStruct(rawRequest, SomeInterface2ReferenceOtherClassRequest::class.java)
        return serializer.asStruct(SomeInterface2ReferenceOtherClassResponse(api.referenceOtherClass(request.getOther())))
    }

    @PostMapping("/referenceLegacyType")
    fun referenceLegacyType(@RequestBody rawRequest: Struct): Struct {
        val request = serializer.fromStruct(rawRequest, SomeInterface2ReferenceLegacyTypeRequest::class.java)
        return serializer.asStruct(SomeInterface2ReferenceLegacyTypeResponse(api.referenceLegacyType(request.getLegacyType())))
    }
}

