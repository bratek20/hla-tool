// DO NOT EDIT! Autogenerated by HLA tool

package com.some.pkg.othermodule.fixtures

import com.some.pkg.othermodule.api.*

fun diffOtherId(given: OtherId, expected: Int, path: String = ""): String {
    if (given.value != expected) { return "${path}value ${given.value} != ${expected}" }
    return ""
}

data class ExpectedOtherProperty(
    var id: Int? = null,
    var name: String? = null,
)
fun diffOtherProperty(given: OtherProperty, expectedInit: ExpectedOtherProperty.() -> Unit, path: String = ""): String {
    val expected = ExpectedOtherProperty().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.id?.let {
        if (diffOtherId(given.getId(), it) != "") { result.add(diffOtherId(given.getId(), it, "${path}id.")) }
    }

    expected.name?.let {
        if (given.getName() != it) { result.add("${path}name ${given.getName()} != ${it}") }
    }

    return result.joinToString("\n")
}

data class ExpectedOtherClass(
    var id: Int? = null,
    var amount: Int? = null,
)
fun diffOtherClass(given: OtherClass, expectedInit: ExpectedOtherClass.() -> Unit, path: String = ""): String {
    val expected = ExpectedOtherClass().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.id?.let {
        if (diffOtherId(given.getId(), it) != "") { result.add(diffOtherId(given.getId(), it, "${path}id.")) }
    }

    expected.amount?.let {
        if (given.getAmount() != it) { result.add("${path}amount ${given.getAmount()} != ${it}") }
    }

    return result.joinToString("\n")
}

data class ExpectedOtherData(
    var id: Int? = null,
)
fun diffOtherData(given: OtherData, expectedInit: ExpectedOtherData.() -> Unit, path: String = ""): String {
    val expected = ExpectedOtherData().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.id?.let {
        if (diffOtherId(given.getId(), it) != "") { result.add(diffOtherId(given.getId(), it, "${path}id.")) }
    }

    return result.joinToString("\n")
}