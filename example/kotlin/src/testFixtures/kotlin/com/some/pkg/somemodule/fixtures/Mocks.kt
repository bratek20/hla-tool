// DO NOT EDIT! Autogenerated by HLA tool

package com.some.pkg.somemodule.fixtures

import com.some.pkg.othermodule.fixtures.*
import com.some.pkg.simplemodule.fixtures.*
import com.some.pkg.typesmodule.fixtures.*

class SomeInterfaceMock: SomeInterface {
    private var someEmptyMethodCalls: Int = 0
    private var someCommandCalls: Int = 0
    private var someQueryCalls: Int = 0
    private var someQueryResponse: Action<SomeClassDef> = null
    private var optMethodCalls: Int = 0
    private var optMethodResponse: Action<SomeClassDef>? = null
    private var methodWithListOfSimpleVOCalls: Int = 0
    private var methodWithListOfSimpleVOResponse: List<String> = emptyList()
    private var methodWithAnyCalls: Int = 0
    private var methodWithAnyResponse: Any = null
    private var methodReturningOptSimpleVoCalls: Int = 0
    private var methodReturningOptSimpleVoResponse: String? = null
    fun someEmptyMethod(): Unit {
        someEmptyMethodCalls = someEmptyMethodCalls + 1
    }
    fun assertSomeEmptyMethodCalls(expectedNumber: Int) {
        AssertEquals(someEmptyMethodCalls, expectedNumber, "Expected 'someEmptyMethod' to be called " + expectedNumber + " times but was called " + someEmptyMethodCalls + " times")
    }
    fun someCommand(id: SomeId, amount: Int): Unit {
        someCommandCalls = someCommandCalls + 1
    }
    fun assertSomeCommandCalls(expectedNumber: Int) {
        AssertEquals(someCommandCalls, expectedNumber, "Expected 'someCommand' to be called " + expectedNumber + " times but was called " + someCommandCalls + " times")
    }
    fun someQuery(query: SomeQueryInput): SomeClass {
        someQueryCalls = someQueryCalls + 1
        return someClass(someQueryResponse)
    }
    fun assertSomeQueryCalls(expectedNumber: Int) {
        AssertEquals(someQueryCalls, expectedNumber, "Expected 'someQuery' to be called " + expectedNumber + " times but was called " + someQueryCalls + " times")
    }
    fun setSomeQueryResponse(response: Action<SomeClassDef>) {
        someQueryResponse = response
    }
    fun optMethod(optId: SomeId?): SomeClass? {
        optMethodCalls = optMethodCalls + 1
        return optMethodResponse?.let { it -> someClass(it) }
    }
    fun assertOptMethodCalls(expectedNumber: Int) {
        AssertEquals(optMethodCalls, expectedNumber, "Expected 'optMethod' to be called " + expectedNumber + " times but was called " + optMethodCalls + " times")
    }
    fun setOptMethodResponse(response: Action<SomeClassDef>?) {
        optMethodResponse = response
    }
    fun methodWithListOfSimpleVO(list: List<SomeId>): List<SomeId> {
        methodWithListOfSimpleVOCalls = methodWithListOfSimpleVOCalls + 1
        return methodWithListOfSimpleVOResponse.map { it -> SomeId(it) }
    }
    fun assertMethodWithListOfSimpleVOCalls(expectedNumber: Int) {
        AssertEquals(methodWithListOfSimpleVOCalls, expectedNumber, "Expected 'methodWithListOfSimpleVO' to be called " + expectedNumber + " times but was called " + methodWithListOfSimpleVOCalls + " times")
    }
    fun setMethodWithListOfSimpleVOResponse(response: List<String>) {
        methodWithListOfSimpleVOResponse = response
    }
    fun methodWithAny(i: Any): Any {
        methodWithAnyCalls = methodWithAnyCalls + 1
        return methodWithAnyResponse
    }
    fun assertMethodWithAnyCalls(expectedNumber: Int) {
        AssertEquals(methodWithAnyCalls, expectedNumber, "Expected 'methodWithAny' to be called " + expectedNumber + " times but was called " + methodWithAnyCalls + " times")
    }
    fun setMethodWithAnyResponse(response: Any) {
        methodWithAnyResponse = response
    }
    fun methodReturningOptSimpleVo(): SomeId? {
        methodReturningOptSimpleVoCalls = methodReturningOptSimpleVoCalls + 1
        return methodReturningOptSimpleVoResponse?.let { it -> SomeId(it) }
    }
    fun assertMethodReturningOptSimpleVoCalls(expectedNumber: Int) {
        AssertEquals(methodReturningOptSimpleVoCalls, expectedNumber, "Expected 'methodReturningOptSimpleVo' to be called " + expectedNumber + " times but was called " + methodReturningOptSimpleVoCalls + " times")
    }
    fun setMethodReturningOptSimpleVoResponse(response: String?) {
        methodReturningOptSimpleVoResponse = response
    }
    fun reset() {
        someEmptyMethodCalls = 0
        someCommandCalls = 0
        someQueryCalls = 0
        optMethodCalls = 0
        methodWithListOfSimpleVOCalls = 0
        methodWithAnyCalls = 0
        methodReturningOptSimpleVoCalls = 0
    }
}

class SomeInterface2Mock: SomeInterface2 {
    private var referenceOtherClassCalls: Int = 0
    private var referenceOtherClassResponse: Action<OtherClassDef> = null
    private var referenceLegacyTypeCalls: Int = 0
    private var referenceLegacyTypeResponse: com.some.pkg.legacy.LegacyType = null
    fun referenceOtherClass(other: OtherClass): OtherClass {
        referenceOtherClassCalls = referenceOtherClassCalls + 1
        return otherClass(referenceOtherClassResponse)
    }
    fun assertReferenceOtherClassCalls(expectedNumber: Int) {
        AssertEquals(referenceOtherClassCalls, expectedNumber, "Expected 'referenceOtherClass' to be called " + expectedNumber + " times but was called " + referenceOtherClassCalls + " times")
    }
    fun setReferenceOtherClassResponse(response: Action<OtherClassDef>) {
        referenceOtherClassResponse = response
    }
    fun referenceLegacyType(legacyType: com.some.pkg.legacy.LegacyType): com.some.pkg.legacy.LegacyType {
        referenceLegacyTypeCalls = referenceLegacyTypeCalls + 1
        return TODO()
    }
    fun assertReferenceLegacyTypeCalls(expectedNumber: Int) {
        AssertEquals(referenceLegacyTypeCalls, expectedNumber, "Expected 'referenceLegacyType' to be called " + expectedNumber + " times but was called " + referenceLegacyTypeCalls + " times")
    }
    fun setReferenceLegacyTypeResponse(response: com.some.pkg.legacy.LegacyType) {
        referenceLegacyTypeResponse = response
    }
    fun reset() {
        referenceOtherClassCalls = 0
        referenceLegacyTypeCalls = 0
    }
}

class SomeModuleHandlersMock: SomeModuleHandlers {
    private var someHandlerCalls: Int = 0
    private var someHandlerResponse: Action<SomeHandlerOutputDef> = null
    private var someHandler2Calls: Int = 0
    private var someHandler2Response: Action<SomeHandlerOutputDef> = null
    fun someHandler(i: SomeHandlerInput): SomeHandlerOutput {
        someHandlerCalls = someHandlerCalls + 1
        return someHandlerOutput(someHandlerResponse)
    }
    fun assertSomeHandlerCalls(expectedNumber: Int) {
        AssertEquals(someHandlerCalls, expectedNumber, "Expected 'someHandler' to be called " + expectedNumber + " times but was called " + someHandlerCalls + " times")
    }
    fun setSomeHandlerResponse(response: Action<SomeHandlerOutputDef>) {
        someHandlerResponse = response
    }
    fun someHandler2(i: SomeHandlerInput): SomeHandlerOutput {
        someHandler2Calls = someHandler2Calls + 1
        return someHandlerOutput(someHandler2Response)
    }
    fun assertSomeHandler2Calls(expectedNumber: Int) {
        AssertEquals(someHandler2Calls, expectedNumber, "Expected 'someHandler2' to be called " + expectedNumber + " times but was called " + someHandler2Calls + " times")
    }
    fun setSomeHandler2Response(response: Action<SomeHandlerOutputDef>) {
        someHandler2Response = response
    }
    fun reset() {
        someHandlerCalls = 0
        someHandler2Calls = 0
    }
}

class SomeModuleDebugHandlersMock: SomeModuleDebugHandlers {
    private var someDebugHandlerCalls: Int = 0
    private var someDebugHandlerResponse: Action<SomeHandlerOutputDef> = null
    private var someDebugHandler2Calls: Int = 0
    private var someDebugHandler2Response: Action<SomeHandlerOutputDef> = null
    fun someDebugHandler(i: SomeHandlerInput): SomeHandlerOutput {
        someDebugHandlerCalls = someDebugHandlerCalls + 1
        return someHandlerOutput(someDebugHandlerResponse)
    }
    fun assertSomeDebugHandlerCalls(expectedNumber: Int) {
        AssertEquals(someDebugHandlerCalls, expectedNumber, "Expected 'someDebugHandler' to be called " + expectedNumber + " times but was called " + someDebugHandlerCalls + " times")
    }
    fun setSomeDebugHandlerResponse(response: Action<SomeHandlerOutputDef>) {
        someDebugHandlerResponse = response
    }
    fun someDebugHandler2(i: SomeHandlerInput): SomeHandlerOutput {
        someDebugHandler2Calls = someDebugHandler2Calls + 1
        return someHandlerOutput(someDebugHandler2Response)
    }
    fun assertSomeDebugHandler2Calls(expectedNumber: Int) {
        AssertEquals(someDebugHandler2Calls, expectedNumber, "Expected 'someDebugHandler2' to be called " + expectedNumber + " times but was called " + someDebugHandler2Calls + " times")
    }
    fun setSomeDebugHandler2Response(response: Action<SomeHandlerOutputDef>) {
        someDebugHandler2Response = response
    }
    fun reset() {
        someDebugHandlerCalls = 0
        someDebugHandler2Calls = 0
    }
}

namespace SomeModule.Mocks {
    export fun createSomeInterfaceMock(): SomeInterfaceMock {
        return SomeInterfaceMock()
    }

    export fun setupSomeInterface(): SomeInterfaceMock {
        val mock = SomeModule.Mocks.createSomeInterfaceMock()
        SomeModule.Api.someEmptyMethod = CreateMock(SomeModule.Api.someEmptyMethod, () => { mock.someEmptyMethod() })
        SomeModule.Api.someCommand = CreateMock(SomeModule.Api.someCommand, (id: SomeId, amount: Int) => { mock.someCommand(id, amount) })
        SomeModule.Api.someQuery = CreateMock(SomeModule.Api.someQuery, (query: SomeQueryInput) => { return mock.someQuery(query) })
        SomeModule.Api.optMethod = CreateMock(SomeModule.Api.optMethod, (optId: SomeId?) => { return mock.optMethod(optId) })
        SomeModule.Api.methodWithListOfSimpleVO = CreateMock(SomeModule.Api.methodWithListOfSimpleVO, (list: List<SomeId>) => { return mock.methodWithListOfSimpleVO(list) })
        SomeModule.Api.methodWithAny = CreateMock(SomeModule.Api.methodWithAny, (i: Any) => { return mock.methodWithAny(i) })
        SomeModule.Api.methodReturningOptSimpleVo = CreateMock(SomeModule.Api.methodReturningOptSimpleVo, () => { return mock.methodReturningOptSimpleVo() })
        return mock
    }

    export fun createSomeInterface2Mock(): SomeInterface2Mock {
        return SomeInterface2Mock()
    }

    export fun setupSomeInterface2(): SomeInterface2Mock {
        val mock = SomeModule.Mocks.createSomeInterface2Mock()
        SomeModule.Api.referenceOtherClass = CreateMock(SomeModule.Api.referenceOtherClass, (other: OtherClass) => { return mock.referenceOtherClass(other) })
        SomeModule.Api.referenceLegacyType = CreateMock(SomeModule.Api.referenceLegacyType, (legacyType: com.some.pkg.legacy.LegacyType) => { return mock.referenceLegacyType(legacyType) })
        return mock
    }

    export fun createSomeModuleHandlersMock(): SomeModuleHandlersMock {
        return SomeModuleHandlersMock()
    }

    export fun setupSomeModuleHandlers(): SomeModuleHandlersMock {
        val mock = SomeModule.Mocks.createSomeModuleHandlersMock()
        SomeModule.Api.someHandler = CreateMock(SomeModule.Api.someHandler, (i: SomeHandlerInput) => { return mock.someHandler(i) })
        SomeModule.Api.someHandler2 = CreateMock(SomeModule.Api.someHandler2, (i: SomeHandlerInput) => { return mock.someHandler2(i) })
        return mock
    }

    export fun createSomeModuleDebugHandlersMock(): SomeModuleDebugHandlersMock {
        return SomeModuleDebugHandlersMock()
    }

    export fun setupSomeModuleDebugHandlers(): SomeModuleDebugHandlersMock {
        val mock = SomeModule.Mocks.createSomeModuleDebugHandlersMock()
        SomeModule.Api.someDebugHandler = CreateMock(SomeModule.Api.someDebugHandler, (i: SomeHandlerInput) => { return mock.someDebugHandler(i) })
        SomeModule.Api.someDebugHandler2 = CreateMock(SomeModule.Api.someDebugHandler2, (i: SomeHandlerInput) => { return mock.someDebugHandler2(i) })
        return mock
    }
}