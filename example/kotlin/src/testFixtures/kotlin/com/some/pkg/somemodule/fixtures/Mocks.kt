// DO NOT EDIT! Autogenerated by HLA tool

package com.some.pkg.somemodule.fixtures

import com.some.pkg.somemodule.api.*
import org.assertj.core.api.Assertions.assertThat
import com.some.pkg.othermodule.fixtures.*
import com.some.pkg.othermodule.api.*
import com.some.pkg.simplemodule.fixtures.*
import com.some.pkg.simplemodule.api.*
import com.some.pkg.typesmodule.fixtures.*
import com.some.pkg.typesmodule.api.*

class SomeInterfaceMock: SomeInterface {
    private var someEmptyMethodCallsNumber: Int = 0
    private var someCommandCallsNumber: Int = 0
    private var someQueryCallsNumber: Int = 0
    private var someQueryResponse: (SomeClassDef.() -> Unit) = {}
    private var optMethodCallsNumber: Int = 0
    private var optMethodResponse: (SomeClassDef.() -> Unit)? = null
    private var methodWithListOfSimpleVOCallsNumber: Int = 0
    private var methodWithListOfSimpleVOResponse: List<String> = emptyList()
    private var methodWithAnyCallsNumber: Int = 0
    private var methodWithAnyResponse: Any = {}
    private var methodReturningOptSimpleVoCallsNumber: Int = 0
    private var methodReturningOptSimpleVoResponse: String? = null
    private var methodReturningNumericTypeCallsNumber: Int = 0
    private var methodReturningNumericTypeResponse: Int = 0
    override fun someEmptyMethod(): Unit {
        someEmptyMethodCallsNumber = someEmptyMethodCallsNumber + 1
    }
    fun assertSomeEmptyMethodCallsNumber(expectedNumber: Int) {
        assertThat(someEmptyMethodCallsNumber).withFailMessage("Expected 'someEmptyMethod' to be called " + expectedNumber + " times but was called " + someEmptyMethodCallsNumber + " times").isEqualTo(expectedNumber)
    }
    override fun someCommand(id: SomeId, amount: Int): Unit {
        someCommandCallsNumber = someCommandCallsNumber + 1
    }
    fun assertSomeCommandCallsNumber(expectedNumber: Int) {
        assertThat(someCommandCallsNumber).withFailMessage("Expected 'someCommand' to be called " + expectedNumber + " times but was called " + someCommandCallsNumber + " times").isEqualTo(expectedNumber)
    }
    override fun someQuery(query: SomeQueryInput): SomeClass {
        someQueryCallsNumber = someQueryCallsNumber + 1
        return someClass(someQueryResponse)
    }
    fun assertSomeQueryCallsNumber(expectedNumber: Int) {
        assertThat(someQueryCallsNumber).withFailMessage("Expected 'someQuery' to be called " + expectedNumber + " times but was called " + someQueryCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setSomeQueryResponse(response: (SomeClassDef.() -> Unit)) {
        someQueryResponse = response
    }
    override fun optMethod(optId: SomeId?): SomeClass? {
        optMethodCallsNumber = optMethodCallsNumber + 1
        return optMethodResponse?.let { it -> someClass(it) }
    }
    fun assertOptMethodCallsNumber(expectedNumber: Int) {
        assertThat(optMethodCallsNumber).withFailMessage("Expected 'optMethod' to be called " + expectedNumber + " times but was called " + optMethodCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setOptMethodResponse(response: (SomeClassDef.() -> Unit)?) {
        optMethodResponse = response
    }
    override fun methodWithListOfSimpleVO(list: List<SomeId>): List<SomeId> {
        methodWithListOfSimpleVOCallsNumber = methodWithListOfSimpleVOCallsNumber + 1
        return methodWithListOfSimpleVOResponse.map { it -> SomeId(it) }
    }
    fun assertMethodWithListOfSimpleVOCallsNumber(expectedNumber: Int) {
        assertThat(methodWithListOfSimpleVOCallsNumber).withFailMessage("Expected 'methodWithListOfSimpleVO' to be called " + expectedNumber + " times but was called " + methodWithListOfSimpleVOCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setMethodWithListOfSimpleVOResponse(response: List<String>) {
        methodWithListOfSimpleVOResponse = response
    }
    override fun methodWithAny(i: Any): Any {
        methodWithAnyCallsNumber = methodWithAnyCallsNumber + 1
        return methodWithAnyResponse
    }
    fun assertMethodWithAnyCallsNumber(expectedNumber: Int) {
        assertThat(methodWithAnyCallsNumber).withFailMessage("Expected 'methodWithAny' to be called " + expectedNumber + " times but was called " + methodWithAnyCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setMethodWithAnyResponse(response: Any) {
        methodWithAnyResponse = response
    }
    override fun methodReturningOptSimpleVo(): SomeId? {
        methodReturningOptSimpleVoCallsNumber = methodReturningOptSimpleVoCallsNumber + 1
        return methodReturningOptSimpleVoResponse?.let { it -> SomeId(it) }
    }
    fun assertMethodReturningOptSimpleVoCallsNumber(expectedNumber: Int) {
        assertThat(methodReturningOptSimpleVoCallsNumber).withFailMessage("Expected 'methodReturningOptSimpleVo' to be called " + expectedNumber + " times but was called " + methodReturningOptSimpleVoCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setMethodReturningOptSimpleVoResponse(response: String?) {
        methodReturningOptSimpleVoResponse = response
    }
    override fun methodReturningNumericType(): Int {
        methodReturningNumericTypeCallsNumber = methodReturningNumericTypeCallsNumber + 1
        return methodReturningNumericTypeResponse
    }
    fun assertMethodReturningNumericTypeCallsNumber(expectedNumber: Int) {
        assertThat(methodReturningNumericTypeCallsNumber).withFailMessage("Expected 'methodReturningNumericType' to be called " + expectedNumber + " times but was called " + methodReturningNumericTypeCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setMethodReturningNumericTypeResponse(response: Int) {
        methodReturningNumericTypeResponse = response
    }
    fun reset() {
        someEmptyMethodCallsNumber = 0
        someCommandCallsNumber = 0
        someQueryCallsNumber = 0
        someQueryResponse = {}
        optMethodCallsNumber = 0
        optMethodResponse = null
        methodWithListOfSimpleVOCallsNumber = 0
        methodWithListOfSimpleVOResponse = emptyList()
        methodWithAnyCallsNumber = 0
        methodWithAnyResponse = {}
        methodReturningOptSimpleVoCallsNumber = 0
        methodReturningOptSimpleVoResponse = null
        methodReturningNumericTypeCallsNumber = 0
        methodReturningNumericTypeResponse = 0
    }
}

class SomeInterface2Mock: SomeInterface2 {
    private var referenceOtherClassCallsNumber: Int = 0
    private var referenceOtherClassResponse: (OtherClassDef.() -> Unit) = {}
    private var referenceLegacyTypeCallsNumber: Int = 0
    override fun referenceOtherClass(other: OtherClass): OtherClass {
        referenceOtherClassCallsNumber = referenceOtherClassCallsNumber + 1
        return otherClass(referenceOtherClassResponse)
    }
    fun assertReferenceOtherClassCallsNumber(expectedNumber: Int) {
        assertThat(referenceOtherClassCallsNumber).withFailMessage("Expected 'referenceOtherClass' to be called " + expectedNumber + " times but was called " + referenceOtherClassCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setReferenceOtherClassResponse(response: (OtherClassDef.() -> Unit)) {
        referenceOtherClassResponse = response
    }
    override fun referenceLegacyType(legacyType: com.some.pkg.legacy.LegacyType): com.some.pkg.legacy.LegacyType {
        referenceLegacyTypeCallsNumber = referenceLegacyTypeCallsNumber + 1
        return TODO()
    }
    fun assertReferenceLegacyTypeCallsNumber(expectedNumber: Int) {
        assertThat(referenceLegacyTypeCallsNumber).withFailMessage("Expected 'referenceLegacyType' to be called " + expectedNumber + " times but was called " + referenceLegacyTypeCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun reset() {
        referenceOtherClassCallsNumber = 0
        referenceOtherClassResponse = {}
        referenceLegacyTypeCallsNumber = 0
    }
}

class SomeModuleHandlersMock: SomeModuleHandlers {
    private var someHandlerCallsNumber: Int = 0
    private var someHandlerResponse: (SomeHandlerOutputDef.() -> Unit) = {}
    private var someHandler2CallsNumber: Int = 0
    private var someHandler2Response: (SomeHandlerOutputDef.() -> Unit) = {}
    override fun someHandler(i: SomeHandlerInput): SomeHandlerOutput {
        someHandlerCallsNumber = someHandlerCallsNumber + 1
        return someHandlerOutput(someHandlerResponse)
    }
    fun assertSomeHandlerCallsNumber(expectedNumber: Int) {
        assertThat(someHandlerCallsNumber).withFailMessage("Expected 'someHandler' to be called " + expectedNumber + " times but was called " + someHandlerCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setSomeHandlerResponse(response: (SomeHandlerOutputDef.() -> Unit)) {
        someHandlerResponse = response
    }
    override fun someHandler2(i: SomeHandlerInput): SomeHandlerOutput {
        someHandler2CallsNumber = someHandler2CallsNumber + 1
        return someHandlerOutput(someHandler2Response)
    }
    fun assertSomeHandler2CallsNumber(expectedNumber: Int) {
        assertThat(someHandler2CallsNumber).withFailMessage("Expected 'someHandler2' to be called " + expectedNumber + " times but was called " + someHandler2CallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setSomeHandler2Response(response: (SomeHandlerOutputDef.() -> Unit)) {
        someHandler2Response = response
    }
    fun reset() {
        someHandlerCallsNumber = 0
        someHandlerResponse = {}
        someHandler2CallsNumber = 0
        someHandler2Response = {}
    }
}

class SomeModuleDebugHandlersMock: SomeModuleDebugHandlers {
    private var someDebugHandlerCallsNumber: Int = 0
    private var someDebugHandlerResponse: (SomeHandlerOutputDef.() -> Unit) = {}
    private var someDebugHandler2CallsNumber: Int = 0
    private var someDebugHandler2Response: (SomeHandlerOutputDef.() -> Unit) = {}
    override fun someDebugHandler(i: SomeHandlerInput): SomeHandlerOutput {
        someDebugHandlerCallsNumber = someDebugHandlerCallsNumber + 1
        return someHandlerOutput(someDebugHandlerResponse)
    }
    fun assertSomeDebugHandlerCallsNumber(expectedNumber: Int) {
        assertThat(someDebugHandlerCallsNumber).withFailMessage("Expected 'someDebugHandler' to be called " + expectedNumber + " times but was called " + someDebugHandlerCallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setSomeDebugHandlerResponse(response: (SomeHandlerOutputDef.() -> Unit)) {
        someDebugHandlerResponse = response
    }
    override fun someDebugHandler2(i: SomeHandlerInput): SomeHandlerOutput {
        someDebugHandler2CallsNumber = someDebugHandler2CallsNumber + 1
        return someHandlerOutput(someDebugHandler2Response)
    }
    fun assertSomeDebugHandler2CallsNumber(expectedNumber: Int) {
        assertThat(someDebugHandler2CallsNumber).withFailMessage("Expected 'someDebugHandler2' to be called " + expectedNumber + " times but was called " + someDebugHandler2CallsNumber + " times").isEqualTo(expectedNumber)
    }
    fun setSomeDebugHandler2Response(response: (SomeHandlerOutputDef.() -> Unit)) {
        someDebugHandler2Response = response
    }
    fun reset() {
        someDebugHandlerCallsNumber = 0
        someDebugHandlerResponse = {}
        someDebugHandler2CallsNumber = 0
        someDebugHandler2Response = {}
    }
}