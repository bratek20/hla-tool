// DO NOT EDIT! Autogenerated by HLA tool

package com.some.pkg.somemodule.fixtures

import com.some.pkg.somemodule.api.*
import org.assertj.core.api.Assertions.assertThat
import com.some.pkg.othermodule.fixtures.*
import com.some.pkg.simplemodule.fixtures.*
import com.some.pkg.typesmodule.fixtures.*

class SomeInterfaceMock: SomeInterface {
    private var someEmptyMethodCalls: Int = 0
    private var someCommandCalls: Int = 0
    private var someQueryCalls: Int = 0
    private var someQueryResponse: SomeClassDef.() -> Unit = {}
    private var optMethodCalls: Int = 0
    private var optMethodResponse: (SomeClassDef.() -> Unit)? = null
    private var methodWithListOfSimpleVOCalls: Int = 0
    private var methodWithListOfSimpleVOResponse: List<String> = emptyList()
    private var methodWithAnyCalls: Int = 0
    private var methodWithAnyResponse: Any = {}
    private var methodReturningOptSimpleVoCalls: Int = 0
    private var methodReturningOptSimpleVoResponse: String? = null
    override fun someEmptyMethod(): Unit {
        someEmptyMethodCalls = someEmptyMethodCalls + 1
    }
    fun assertSomeEmptyMethodCalls(expectedNumber: Int) {
        assertThat(someEmptyMethodCalls).withFailMessage("Expected 'someEmptyMethod' to be called " + expectedNumber + " times but was called " + someEmptyMethodCalls + " times").isEqualTo(expectedNumber)
    }
    override fun someCommand(id: SomeId, amount: Int): Unit {
        someCommandCalls = someCommandCalls + 1
    }
    fun assertSomeCommandCalls(expectedNumber: Int) {
        assertThat(someCommandCalls).withFailMessage("Expected 'someCommand' to be called " + expectedNumber + " times but was called " + someCommandCalls + " times").isEqualTo(expectedNumber)
    }
    override fun someQuery(query: SomeQueryInput): SomeClass {
        someQueryCalls = someQueryCalls + 1
        return someClass(someQueryResponse)
    }
    fun assertSomeQueryCalls(expectedNumber: Int) {
        assertThat(someQueryCalls).withFailMessage("Expected 'someQuery' to be called " + expectedNumber + " times but was called " + someQueryCalls + " times").isEqualTo(expectedNumber)
    }
    fun setSomeQueryResponse(response: SomeClassDef.() -> Unit) {
        someQueryResponse = response
    }
    override fun optMethod(optId: SomeId?): SomeClass? {
        optMethodCalls = optMethodCalls + 1
        return optMethodResponse?.let { it -> someClass(it) }
    }
    fun assertOptMethodCalls(expectedNumber: Int) {
        assertThat(optMethodCalls).withFailMessage("Expected 'optMethod' to be called " + expectedNumber + " times but was called " + optMethodCalls + " times").isEqualTo(expectedNumber)
    }
    fun setOptMethodResponse(response: (SomeClassDef.() -> Unit)?) {
        optMethodResponse = response
    }
    override fun methodWithListOfSimpleVO(list: List<SomeId>): List<SomeId> {
        methodWithListOfSimpleVOCalls = methodWithListOfSimpleVOCalls + 1
        return methodWithListOfSimpleVOResponse.map { it -> SomeId(it) }
    }
    fun assertMethodWithListOfSimpleVOCalls(expectedNumber: Int) {
        assertThat(methodWithListOfSimpleVOCalls).withFailMessage("Expected 'methodWithListOfSimpleVO' to be called " + expectedNumber + " times but was called " + methodWithListOfSimpleVOCalls + " times").isEqualTo(expectedNumber)
    }
    fun setMethodWithListOfSimpleVOResponse(response: List<String>) {
        methodWithListOfSimpleVOResponse = response
    }
    override fun methodWithAny(i: Any): Any {
        methodWithAnyCalls = methodWithAnyCalls + 1
        return methodWithAnyResponse
    }
    fun assertMethodWithAnyCalls(expectedNumber: Int) {
        assertThat(methodWithAnyCalls).withFailMessage("Expected 'methodWithAny' to be called " + expectedNumber + " times but was called " + methodWithAnyCalls + " times").isEqualTo(expectedNumber)
    }
    fun setMethodWithAnyResponse(response: Any) {
        methodWithAnyResponse = response
    }
    override fun methodReturningOptSimpleVo(): SomeId? {
        methodReturningOptSimpleVoCalls = methodReturningOptSimpleVoCalls + 1
        return methodReturningOptSimpleVoResponse?.let { it -> SomeId(it) }
    }
    fun assertMethodReturningOptSimpleVoCalls(expectedNumber: Int) {
        assertThat(methodReturningOptSimpleVoCalls).withFailMessage("Expected 'methodReturningOptSimpleVo' to be called " + expectedNumber + " times but was called " + methodReturningOptSimpleVoCalls + " times").isEqualTo(expectedNumber)
    }
    fun setMethodReturningOptSimpleVoResponse(response: String?) {
        methodReturningOptSimpleVoResponse = response
    }
    fun reset() {
        someEmptyMethodCalls = 0
        someCommandCalls = 0
        someQueryCalls = 0
        optMethodCalls = 0
        methodWithListOfSimpleVOCalls = 0
        methodWithAnyCalls = 0
        methodReturningOptSimpleVoCalls = 0
    }
}