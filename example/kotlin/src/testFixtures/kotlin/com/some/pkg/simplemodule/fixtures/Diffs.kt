// DO NOT EDIT! Autogenerated by HLA tool

package com.some.pkg.simplemodule.fixtures

import com.some.pkg.simplemodule.api.*

fun diffSimpleId(given: SimpleId, expected: String, path: String = ""): String {
    if (given.value != expected) { return "${path}value ${given.value} != ${expected}" }
    return ""
}

fun diffSomeLongWrapper(given: SomeLongWrapper, expected: Long, path: String = ""): String {
    if (given.value != expected) { return "${path}value ${given.value} != ${expected}" }
    return ""
}

data class ExpectedUniqueIdEntry(
    var id: String? = null,
)
fun diffUniqueIdEntry(given: UniqueIdEntry, expectedInit: ExpectedUniqueIdEntry.() -> Unit, path: String = ""): String {
    val expected = ExpectedUniqueIdEntry().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.id?.let {
        if (given.getId() != it) { result.add("${path}id ${given.getId()} != ${it}") }
    }

    return result.joinToString("\n")
}