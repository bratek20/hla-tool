package com.github.bratek20.hla.tracking.impl

import com.github.bratek20.codebuilder.core.CodeBuilder
import com.github.bratek20.codebuilder.core.Kotlin
import com.github.bratek20.hla.facade.api.ModuleLanguage
import com.github.bratek20.hla.generation.api.PatternName
import com.github.bratek20.hla.generation.impl.core.GeneratorMode
import com.github.bratek20.hla.generation.impl.core.PatternGenerator
import com.github.bratek20.utils.directory.api.File
import com.github.bratek20.utils.directory.api.FileContent
import com.github.bratek20.utils.directory.api.FileName

class InitSqlGenerator: PatternGenerator() {
    override fun mode(): GeneratorMode {
        return GeneratorMode.ONLY_START
    }

    override fun patternName(): PatternName {
        return PatternName.InitSql
    }

    override fun supportsCodeBuilder() = true

    override fun shouldGenerate(): Boolean {
        return c.language.name() == ModuleLanguage.TYPE_SCRIPT &&
                c.module.getTrackingSubmodule() != null
    }

    override fun getFiles(): List<File> {
        val builder = CodeBuilder(Kotlin())
            .line("-- Autogenerated by HLA tool")

        createTableLogics(module, apiTypeFactory, typesWorldApi).forEach {
            builder.emptyLine()
            it.populateInitSql(builder)
        }

        return listOf(
            File.create(
                name = FileName(fileName()),
                content = FileContent.fromString(builder.build())
            )
        )
    }

    private fun fileName(): String {
        val moduleNameSnakeCase = pascalToSnakeCase(moduleName)
        return "0XX_${moduleNameSnakeCase}_init.sql"
    }
}

//TODO-REF move to b20-utils
fun pascalToSnakeCase(name: String): String {
    return name.replace(Regex("([a-z])([A-Z])"), "$1_$2")
        .lowercase()
}