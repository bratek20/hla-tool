package com.github.bratek20.hla.examples.impl

import com.github.bratek20.codebuilder.builders.*
import com.github.bratek20.codebuilder.core.CodeBuilder
import com.github.bratek20.codebuilder.core.Kotlin
import com.github.bratek20.hla.apitypes.api.ApiTypeFactory
import com.github.bratek20.hla.definitions.api.KeyDefinition
import com.github.bratek20.hla.definitions.api.ModuleDefinition
import com.github.bratek20.hla.facade.api.ModuleLanguage
import com.github.bratek20.hla.generation.api.PatternName
import com.github.bratek20.hla.generation.impl.core.PatternGenerator
import com.github.bratek20.hla.typesworld.api.TypesWorldApi
import com.github.bratek20.utils.directory.api.File
import com.github.bratek20.utils.directory.api.FileContent
import com.github.bratek20.utils.directory.api.FileName

class ExampleJsonLogic(
    private val def: KeyDefinition,
    private val apiTypeFactory: ApiTypeFactory,
    private val typesWorldApi: TypesWorldApi
) {
    fun getClassOps(): ClassBuilderOps {
        return {
            name = def.getName()
        }
    }
}

class ExampleGenerator: PatternGenerator() {
    override fun patternName(): PatternName {
        return PatternName.Examples
    }

    override fun supportsCodeBuilder() = true

    override fun shouldGenerate(): Boolean {
        return c.language.name() == ModuleLanguage.TYPE_SCRIPT &&
                c.module.getPropertyKeys().isNotEmpty()
    }

//    override fun getOperations(): TopLevelCodeBuilderOps = {
//        createExampleLogics(c.module, c.apiTypeFactory, c.typesWorldApi).forEach {
//            addClass { it.getClassOps() }
//        }
//    }

    override fun getFiles(): List<File> {
        val builder = CodeBuilder(Kotlin())
            .line("-- Autogenerated by HLA tool")

        return c.module.getPropertyKeys().map {
            File.create(
                name = FileName("${it.getName()}.json"),
                content = FileContent.fromString(builder.build())
            )
        }
    }
}
fun createExampleLogics(module: ModuleDefinition, apiTypeFactory: ApiTypeFactory, typesWorldApi: TypesWorldApi): List<ExampleJsonLogic> {
    val createExampleLogic = { def: KeyDefinition ->
        ExampleJsonLogic(def, apiTypeFactory, typesWorldApi)
    }
    return module.getPropertyKeys().map {
        createExampleLogic(it)
    }
}