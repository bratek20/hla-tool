// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.definitions.api

import com.github.bratek20.hla.facade.api.*

data class KeyDefinition(
    private val name: String,
    private val type: TypeDefinition,
) {
    fun getName(): String {
        return this.name
    }

    fun getType(): TypeDefinition {
        return this.type
    }

    companion object {
        fun create(
            name: String,
            type: TypeDefinition,
        ): KeyDefinition {
            return KeyDefinition(
                name = name,
                type = type,
            )
        }
    }
}

data class EnumDefinition(
    private val name: String,
    private val values: List<String>,
) {
    fun getName(): String {
        return this.name
    }

    fun getValues(): List<String> {
        return this.values
    }

    companion object {
        fun create(
            name: String,
            values: List<String>,
        ): EnumDefinition {
            return EnumDefinition(
                name = name,
                values = values,
            )
        }
    }
}

data class ImplSubmoduleDefinition(
    private val dataClasses: List<ComplexStructureDefinition>,
    private val dataKeys: List<KeyDefinition>,
) {
    fun getDataClasses(): List<ComplexStructureDefinition> {
        return this.dataClasses
    }

    fun getDataKeys(): List<KeyDefinition> {
        return this.dataKeys
    }

    companion object {
        fun create(
            dataClasses: List<ComplexStructureDefinition>,
            dataKeys: List<KeyDefinition>,
        ): ImplSubmoduleDefinition {
            return ImplSubmoduleDefinition(
                dataClasses = dataClasses,
                dataKeys = dataKeys,
            )
        }
    }
}

data class HttpDefinition(
    private val exposedInterfaces: List<String>,
    private val serverName: String?,
    private val baseUrl: String?,
    private val auth: String?,
) {
    fun getExposedInterfaces(): List<String> {
        return this.exposedInterfaces
    }

    fun getServerName(): String? {
        return this.serverName
    }

    fun getBaseUrl(): String? {
        return this.baseUrl
    }

    fun getAuth(): String? {
        return this.auth
    }

    companion object {
        fun create(
            exposedInterfaces: List<String>,
            serverName: String?,
            baseUrl: String?,
            auth: String?,
        ): HttpDefinition {
            return HttpDefinition(
                exposedInterfaces = exposedInterfaces,
                serverName = serverName,
                baseUrl = baseUrl,
                auth = auth,
            )
        }
    }
}

data class WebSubmoduleDefinition(
    private val http: HttpDefinition?,
) {
    fun getHttp(): HttpDefinition? {
        return this.http
    }

    companion object {
        fun create(
            http: HttpDefinition?,
        ): WebSubmoduleDefinition {
            return WebSubmoduleDefinition(
                http = http,
            )
        }
    }
}

data class ExternalTypePackageMapping(
    private val name: String,
    private val packageName: String,
) {
    fun getName(): String {
        return this.name
    }

    fun getPackageName(): String {
        return this.packageName
    }

    companion object {
        fun create(
            name: String,
            packageName: String,
        ): ExternalTypePackageMapping {
            return ExternalTypePackageMapping(
                name = name,
                packageName = packageName,
            )
        }
    }
}

data class KotlinConfig(
    private val externalTypePackages: List<ExternalTypePackageMapping>,
    private val records: List<String>,
) {
    fun getExternalTypePackages(): List<ExternalTypePackageMapping> {
        return this.externalTypePackages
    }

    fun getRecords(): List<String> {
        return this.records
    }

    companion object {
        fun create(
            externalTypePackages: List<ExternalTypePackageMapping>,
            records: List<String>,
        ): KotlinConfig {
            return KotlinConfig(
                externalTypePackages = externalTypePackages,
                records = records,
            )
        }
    }
}

data class ModuleDefinition(
    private val name: String,
    private val simpleCustomTypes: List<SimpleStructureDefinition>,
    private val complexCustomTypes: List<ComplexStructureDefinition>,
    private val simpleValueObjects: List<SimpleStructureDefinition>,
    private val complexValueObjects: List<ComplexStructureDefinition>,
    private val dataClasses: List<ComplexStructureDefinition>,
    private val interfaces: List<InterfaceDefinition>,
    private val propertyKeys: List<KeyDefinition>,
    private val dataKeys: List<KeyDefinition>,
    private val enums: List<EnumDefinition>,
    private val externalTypes: List<String>,
    private val implSubmodule: ImplSubmoduleDefinition?,
    private val webSubmodule: WebSubmoduleDefinition?,
    private val kotlinConfig: KotlinConfig?,
) {
    fun getName(): ModuleName {
        return ModuleName(this.name)
    }

    fun getSimpleCustomTypes(): List<SimpleStructureDefinition> {
        return this.simpleCustomTypes
    }

    fun getComplexCustomTypes(): List<ComplexStructureDefinition> {
        return this.complexCustomTypes
    }

    fun getSimpleValueObjects(): List<SimpleStructureDefinition> {
        return this.simpleValueObjects
    }

    fun getComplexValueObjects(): List<ComplexStructureDefinition> {
        return this.complexValueObjects
    }

    fun getDataClasses(): List<ComplexStructureDefinition> {
        return this.dataClasses
    }

    fun getInterfaces(): List<InterfaceDefinition> {
        return this.interfaces
    }

    fun getPropertyKeys(): List<KeyDefinition> {
        return this.propertyKeys
    }

    fun getDataKeys(): List<KeyDefinition> {
        return this.dataKeys
    }

    fun getEnums(): List<EnumDefinition> {
        return this.enums
    }

    fun getExternalTypes(): List<String> {
        return this.externalTypes
    }

    fun getImplSubmodule(): ImplSubmoduleDefinition? {
        return this.implSubmodule
    }

    fun getWebSubmodule(): WebSubmoduleDefinition? {
        return this.webSubmodule
    }

    fun getKotlinConfig(): KotlinConfig? {
        return this.kotlinConfig
    }

    companion object {
        fun create(
            name: ModuleName,
            simpleCustomTypes: List<SimpleStructureDefinition>,
            complexCustomTypes: List<ComplexStructureDefinition>,
            simpleValueObjects: List<SimpleStructureDefinition>,
            complexValueObjects: List<ComplexStructureDefinition>,
            dataClasses: List<ComplexStructureDefinition>,
            interfaces: List<InterfaceDefinition>,
            propertyKeys: List<KeyDefinition>,
            dataKeys: List<KeyDefinition>,
            enums: List<EnumDefinition>,
            externalTypes: List<String>,
            implSubmodule: ImplSubmoduleDefinition?,
            webSubmodule: WebSubmoduleDefinition?,
            kotlinConfig: KotlinConfig?,
        ): ModuleDefinition {
            return ModuleDefinition(
                name = name.value,
                simpleCustomTypes = simpleCustomTypes,
                complexCustomTypes = complexCustomTypes,
                simpleValueObjects = simpleValueObjects,
                complexValueObjects = complexValueObjects,
                dataClasses = dataClasses,
                interfaces = interfaces,
                propertyKeys = propertyKeys,
                dataKeys = dataKeys,
                enums = enums,
                externalTypes = externalTypes,
                implSubmodule = implSubmodule,
                webSubmodule = webSubmodule,
                kotlinConfig = kotlinConfig,
            )
        }
    }
}

data class TypeDefinition(
    private val name: String,
    private val wrappers: List<TypeWrapper>,
) {
    fun getName(): String {
        return this.name
    }

    fun getWrappers(): List<TypeWrapper> {
        return this.wrappers
    }

    companion object {
        fun create(
            name: String,
            wrappers: List<TypeWrapper>,
        ): TypeDefinition {
            return TypeDefinition(
                name = name,
                wrappers = wrappers,
            )
        }
    }
}

data class FieldDefinition(
    private val name: String,
    private val type: TypeDefinition,
    private val attributes: List<Attribute>,
    private val defaultValue: String?,
) {
    fun getName(): String {
        return this.name
    }

    fun getType(): TypeDefinition {
        return this.type
    }

    fun getAttributes(): List<Attribute> {
        return this.attributes
    }

    fun getDefaultValue(): String? {
        return this.defaultValue
    }

    companion object {
        fun create(
            name: String,
            type: TypeDefinition,
            attributes: List<Attribute>,
            defaultValue: String?,
        ): FieldDefinition {
            return FieldDefinition(
                name = name,
                type = type,
                attributes = attributes,
                defaultValue = defaultValue,
            )
        }
    }
}

data class Attribute(
    private val name: String,
    private val value: String,
) {
    fun getName(): String {
        return this.name
    }

    fun getValue(): String {
        return this.value
    }

    companion object {
        fun create(
            name: String,
            value: String,
        ): Attribute {
            return Attribute(
                name = name,
                value = value,
            )
        }
    }
}

data class SimpleStructureDefinition(
    private val name: String,
    private val typeName: String,
    private val attributes: List<Attribute>,
) {
    fun getName(): String {
        return this.name
    }

    fun getTypeName(): String {
        return this.typeName
    }

    fun getAttributes(): List<Attribute> {
        return this.attributes
    }

    companion object {
        fun create(
            name: String,
            typeName: String,
            attributes: List<Attribute>,
        ): SimpleStructureDefinition {
            return SimpleStructureDefinition(
                name = name,
                typeName = typeName,
                attributes = attributes,
            )
        }
    }
}

data class ComplexStructureDefinition(
    private val name: String,
    private val fields: List<FieldDefinition>,
) {
    fun getName(): String {
        return this.name
    }

    fun getFields(): List<FieldDefinition> {
        return this.fields
    }

    companion object {
        fun create(
            name: String,
            fields: List<FieldDefinition>,
        ): ComplexStructureDefinition {
            return ComplexStructureDefinition(
                name = name,
                fields = fields,
            )
        }
    }
}

data class InterfaceDefinition(
    private val name: String,
    private val methods: List<MethodDefinition>,
) {
    fun getName(): String {
        return this.name
    }

    fun getMethods(): List<MethodDefinition> {
        return this.methods
    }

    companion object {
        fun create(
            name: String,
            methods: List<MethodDefinition>,
        ): InterfaceDefinition {
            return InterfaceDefinition(
                name = name,
                methods = methods,
            )
        }
    }
}

data class ArgumentDefinition(
    private val name: String,
    private val type: TypeDefinition,
) {
    fun getName(): String {
        return this.name
    }

    fun getType(): TypeDefinition {
        return this.type
    }

    companion object {
        fun create(
            name: String,
            type: TypeDefinition,
        ): ArgumentDefinition {
            return ArgumentDefinition(
                name = name,
                type = type,
            )
        }
    }
}

data class ExceptionDefinition(
    private val name: String,
) {
    fun getName(): String {
        return this.name
    }

    companion object {
        fun create(
            name: String,
        ): ExceptionDefinition {
            return ExceptionDefinition(
                name = name,
            )
        }
    }
}

data class MethodDefinition(
    private val name: String,
    private val returnType: TypeDefinition,
    private val args: List<ArgumentDefinition>,
    private val throws: List<ExceptionDefinition>,
) {
    fun getName(): String {
        return this.name
    }

    fun getReturnType(): TypeDefinition {
        return this.returnType
    }

    fun getArgs(): List<ArgumentDefinition> {
        return this.args
    }

    fun getThrows(): List<ExceptionDefinition> {
        return this.throws
    }

    companion object {
        fun create(
            name: String,
            returnType: TypeDefinition,
            args: List<ArgumentDefinition>,
            throws: List<ExceptionDefinition>,
        ): MethodDefinition {
            return MethodDefinition(
                name = name,
                returnType = returnType,
                args = args,
                throws = throws,
            )
        }
    }
}