// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.typesworld.api

data class WorldTypeName(
    val value: String
) {
    override fun toString(): String {
        return value.toString()
    }
}

data class WorldType(
    private val name: String,
    private val path: String,
) {
    fun getName(): WorldTypeName {
        return WorldTypeName(this.name)
    }

    fun getPath(): WorldTypePath {
        return worldTypePathCreate(this.path)
    }

    companion object {
        fun create(
            name: WorldTypeName,
            path: WorldTypePath,
        ): WorldType {
            return WorldType(
                name = name.value,
                path = worldTypePathGetValue(path),
            )
        }
    }
}

data class WorldClassField(
    private val name: String,
    private val type: WorldType,
) {
    fun getName(): String {
        return this.name
    }

    fun getType(): WorldType {
        return this.type
    }

    companion object {
        fun create(
            name: String,
            type: WorldType,
        ): WorldClassField {
            return WorldClassField(
                name = name,
                type = type,
            )
        }
    }
}

data class WorldClassType(
    private val type: WorldType,
    private val fields: List<WorldClassField>,
    private val extends: WorldType? = null,
) {
    fun getType(): WorldType {
        return this.type
    }

    fun getFields(): List<WorldClassField> {
        return this.fields
    }

    fun getExtends(): WorldType? {
        return this.extends
    }

    companion object {
        fun create(
            type: WorldType,
            fields: List<WorldClassField>,
            extends: WorldType? = null,
        ): WorldClassType {
            return WorldClassType(
                type = type,
                fields = fields,
                extends = extends,
            )
        }
    }
}

data class WorldConcreteWrapper(
    private val type: WorldType,
    private val wrappedType: WorldType,
) {
    fun getType(): WorldType {
        return this.type
    }

    fun getWrappedType(): WorldType {
        return this.wrappedType
    }

    companion object {
        fun create(
            type: WorldType,
            wrappedType: WorldType,
        ): WorldConcreteWrapper {
            return WorldConcreteWrapper(
                type = type,
                wrappedType = wrappedType,
            )
        }
    }
}

data class WorldConcreteParametrizedClass(
    private val type: WorldType,
    private val typeArguments: List<WorldType>,
) {
    fun getType(): WorldType {
        return this.type
    }

    fun getTypeArguments(): List<WorldType> {
        return this.typeArguments
    }

    companion object {
        fun create(
            type: WorldType,
            typeArguments: List<WorldType>,
        ): WorldConcreteParametrizedClass {
            return WorldConcreteParametrizedClass(
                type = type,
                typeArguments = typeArguments,
            )
        }
    }
}

data class WorldTypeInfo(
    private val kind: String,
) {
    fun getKind(): WorldTypeKind {
        return WorldTypeKind.valueOf(this.kind)
    }

    companion object {
        fun create(
            kind: WorldTypeKind,
        ): WorldTypeInfo {
            return WorldTypeInfo(
                kind = kind.name,
            )
        }
    }
}