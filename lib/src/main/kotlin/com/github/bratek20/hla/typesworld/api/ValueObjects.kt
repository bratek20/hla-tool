// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.typesworld.api

data class HlaTypeName(
    val value: String
) {
    override fun toString(): String {
        return value.toString()
    }
}

data class HlaType(
    private val kind: String,
    private val name: String,
    private val path: String,
) {
    fun getKind(): HlaTypeKind {
        return HlaTypeKind.valueOf(this.kind)
    }

    fun getName(): HlaTypeName {
        return HlaTypeName(this.name)
    }

    fun getPath(): HlaTypePath {
        return hlaTypePathCreate(this.path)
    }

    companion object {
        fun create(
            kind: HlaTypeKind,
            name: HlaTypeName,
            path: HlaTypePath,
        ): HlaType {
            return HlaType(
                kind = kind.name,
                name = name.value,
                path = hlaTypePathGetValue(path),
            )
        }
    }
}

data class ClassField(
    private val name: String,
    private val type: HlaType,
) {
    fun getName(): String {
        return this.name
    }

    fun getType(): HlaType {
        return this.type
    }

    companion object {
        fun create(
            name: String,
            type: HlaType,
        ): ClassField {
            return ClassField(
                name = name,
                type = type,
            )
        }
    }
}

data class ClassType(
    private val type: HlaType,
    private val fields: List<ClassField>,
    private val extends: HlaType? = null,
) {
    fun getType(): HlaType {
        return this.type
    }

    fun getFields(): List<ClassField> {
        return this.fields
    }

    fun getExtends(): HlaType? {
        return this.extends
    }

    companion object {
        fun create(
            type: HlaType,
            fields: List<ClassField>,
            extends: HlaType? = null,
        ): ClassType {
            return ClassType(
                type = type,
                fields = fields,
                extends = extends,
            )
        }
    }
}

data class ConcreteWrapper(
    private val type: HlaType,
    private val wrappedType: HlaType,
) {
    fun getType(): HlaType {
        return this.type
    }

    fun getWrappedType(): HlaType {
        return this.wrappedType
    }

    companion object {
        fun create(
            type: HlaType,
            wrappedType: HlaType,
        ): ConcreteWrapper {
            return ConcreteWrapper(
                type = type,
                wrappedType = wrappedType,
            )
        }
    }
}

data class ConcreteParametrizedClass(
    private val type: HlaType,
    private val typeArguments: List<HlaType>,
) {
    fun getType(): HlaType {
        return this.type
    }

    fun getTypeArguments(): List<HlaType> {
        return this.typeArguments
    }

    companion object {
        fun create(
            type: HlaType,
            typeArguments: List<HlaType>,
        ): ConcreteParametrizedClass {
            return ConcreteParametrizedClass(
                type = type,
                typeArguments = typeArguments,
            )
        }
    }
}