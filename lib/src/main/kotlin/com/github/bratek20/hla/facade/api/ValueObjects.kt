// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.facade.api

import com.github.bratek20.hla.generation.api.*
import com.github.bratek20.utils.directory.api.*

data class ModuleName(
    val value: String
) {
    override fun toString(): String {
        return value.toString()
    }
}

data class ProfileName(
    val value: String
) {
    override fun toString(): String {
        return value.toString()
    }
}

data class ModuleOperationArgs(
    private val hlaFolderPath: String,
    private val profileName: String,
    private val moduleName: String,
) {
    fun getHlaFolderPath(): Path {
        return pathCreate(this.hlaFolderPath)
    }

    fun getProfileName(): ProfileName {
        return ProfileName(this.profileName)
    }

    fun getModuleName(): ModuleName {
        return ModuleName(this.moduleName)
    }

    companion object {
        fun create(
            hlaFolderPath: Path,
            profileName: ProfileName,
            moduleName: ModuleName,
        ): ModuleOperationArgs {
            return ModuleOperationArgs(
                hlaFolderPath = pathGetValue(hlaFolderPath),
                profileName = profileName.value,
                moduleName = moduleName.value,
            )
        }
    }
}

data class AllModulesOperationArgs(
    private val hlaFolderPath: String,
    private val profileName: String,
) {
    fun getHlaFolderPath(): Path {
        return pathCreate(this.hlaFolderPath)
    }

    fun getProfileName(): ProfileName {
        return ProfileName(this.profileName)
    }

    companion object {
        fun create(
            hlaFolderPath: Path,
            profileName: ProfileName,
        ): AllModulesOperationArgs {
            return AllModulesOperationArgs(
                hlaFolderPath = pathGetValue(hlaFolderPath),
                profileName = profileName.value,
            )
        }
    }
}

data class TypeScriptConfig(
    private val mainTsconfigPath: String,
    private val testTsconfigPath: String,
    private val launchJsonPath: String,
    private val packageJsonPath: String,
) {
    fun getMainTsconfigPath(): Path {
        return pathCreate(this.mainTsconfigPath)
    }

    fun getTestTsconfigPath(): Path {
        return pathCreate(this.testTsconfigPath)
    }

    fun getLaunchJsonPath(): Path {
        return pathCreate(this.launchJsonPath)
    }

    fun getPackageJsonPath(): Path {
        return pathCreate(this.packageJsonPath)
    }

    companion object {
        fun create(
            mainTsconfigPath: Path,
            testTsconfigPath: Path,
            launchJsonPath: Path,
            packageJsonPath: Path,
        ): TypeScriptConfig {
            return TypeScriptConfig(
                mainTsconfigPath = pathGetValue(mainTsconfigPath),
                testTsconfigPath = pathGetValue(testTsconfigPath),
                launchJsonPath = pathGetValue(launchJsonPath),
                packageJsonPath = pathGetValue(packageJsonPath),
            )
        }
    }
}

data class SubmodulePath(
    private val path: String,
    private val submodule: String? = null,
    private val submodules: List<String> = emptyList(),
) {
    fun getPath(): Path {
        return pathCreate(this.path)
    }

    fun getSubmodule(): SubmoduleName? {
        return this.submodule?.let { it -> SubmoduleName.valueOf(it) }
    }

    fun getSubmodules(): List<SubmoduleName> {
        return this.submodules.map { it -> SubmoduleName.valueOf(it) }
    }

    companion object {
        fun create(
            path: Path,
            submodule: SubmoduleName? = null,
            submodules: List<SubmoduleName> = emptyList(),
        ): SubmodulePath {
            return SubmodulePath(
                path = pathGetValue(path),
                submodule = submodule?.let { it -> it.name },
                submodules = submodules.map { it -> it.name },
            )
        }
    }
}

data class HlaSrcPaths(
    private val default: String,
    private val overrides: List<SubmodulePath> = emptyList(),
) {
    fun getDefault(): Path {
        return pathCreate(this.default)
    }

    fun getOverrides(): List<SubmodulePath> {
        return this.overrides
    }

    companion object {
        fun create(
            default: Path,
            overrides: List<SubmodulePath> = emptyList(),
        ): HlaSrcPaths {
            return HlaSrcPaths(
                default = pathGetValue(default),
                overrides = overrides,
            )
        }
    }
}

data class HlaPaths(
    private val project: String,
    private val src: HlaSrcPaths,
) {
    fun getProject(): Path {
        return pathCreate(this.project)
    }

    fun getSrc(): HlaSrcPaths {
        return this.src
    }

    companion object {
        fun create(
            project: Path,
            src: HlaSrcPaths,
        ): HlaPaths {
            return HlaPaths(
                project = pathGetValue(project),
                src = src,
            )
        }
    }
}

data class HlaProfileImport(
    private val hlaFolderPath: String,
    private val profileName: String,
) {
    fun getHlaFolderPath(): Path {
        return pathCreate(this.hlaFolderPath)
    }

    fun getProfileName(): ProfileName {
        return ProfileName(this.profileName)
    }

    companion object {
        fun create(
            hlaFolderPath: Path,
            profileName: ProfileName,
        ): HlaProfileImport {
            return HlaProfileImport(
                hlaFolderPath = pathGetValue(hlaFolderPath),
                profileName = profileName.value,
            )
        }
    }
}

data class HlaProfile(
    private val name: String,
    private val language: String,
    private val paths: HlaPaths,
    private val typeScript: TypeScriptConfig?,
    private val onlyPatterns: List<String> = emptyList(),
    private val skipPatterns: List<String> = emptyList(),
    private val imports: List<HlaProfileImport> = emptyList(),
) {
    fun getName(): ProfileName {
        return ProfileName(this.name)
    }

    fun getLanguage(): ModuleLanguage {
        return ModuleLanguage.valueOf(this.language)
    }

    fun getPaths(): HlaPaths {
        return this.paths
    }

    fun getTypeScript(): TypeScriptConfig? {
        return this.typeScript
    }

    fun getOnlyPatterns(): List<PatternName> {
        return this.onlyPatterns.map { it -> PatternName.valueOf(it) }
    }

    fun getSkipPatterns(): List<PatternName> {
        return this.skipPatterns.map { it -> PatternName.valueOf(it) }
    }

    fun getImports(): List<HlaProfileImport> {
        return this.imports
    }

    companion object {
        fun create(
            name: ProfileName,
            language: ModuleLanguage,
            paths: HlaPaths,
            typeScript: TypeScriptConfig?,
            onlyPatterns: List<PatternName> = emptyList(),
            skipPatterns: List<PatternName> = emptyList(),
            imports: List<HlaProfileImport> = emptyList(),
        ): HlaProfile {
            return HlaProfile(
                name = name.value,
                language = language.name,
                paths = paths,
                typeScript = typeScript,
                onlyPatterns = onlyPatterns.map { it -> it.name },
                skipPatterns = skipPatterns.map { it -> it.name },
                imports = imports,
            )
        }
    }
}