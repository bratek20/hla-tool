package ${packageName}.api
#if($imports.size() > 0)

#foreach($import in $imports)
import ${import}.api.*
#end#end

#foreach($vo in $simpleValueObjects)
data class ${vo.name()}(
    val value: ${vo.serializableName()}
) {
    override fun toString(): String {
        return value.toString()
    }
    #if($vo.serializableName() == "Int")

    operator fun plus(other: ${vo.name()}): ${vo.name()} {
        return ${vo.name()}(this.value + other.value)
    }

    operator fun minus(other: ${vo.name()}): ${vo.name()} {
        return ${vo.name()}(this.value - other.value)
    }

    operator fun times(other: ${vo.name()}): ${vo.name()} {
        return ${vo.name()}(this.value * other.value)
    }
    #end
}#if($foreach.hasNext || $complexValueObjects.size() > 0)


#end#end
#foreach($vo in $complexValueObjects)
data class ${vo.name()}(
    #foreach($field in $vo.fields)
    ${field.classDeclaration()},
    #end
) {
    #foreach($getter in $vo.getters())
    fun ${getter.name}(): ${getter.type.name()} {
        return ${getter.type.deserialize("this.${getter.field}")}
    }

    #end
    companion object {
        fun create(
        #foreach($field in $vo.fields)
            $field.createDeclaration(),
        #end
        ): ${vo.name()} {
            return ${vo.name()}(
            #foreach($field in $vo.fields)
                ${field.createConstructorPass()},
            #end
            )
        }
    }
}#if($foreach.hasNext)


#end#end