package ${packageName}.fixtures

import org.assertj.core.api.Assertions.assertThat

import com.github.bratek20.architecture.context.api.ContextBuilder
import com.github.bratek20.architecture.context.api.ContextModule
#if($imports.size() > 0)

#foreach($import in $imports)
import ${import}.api.*
import ${import}.fixtures.*
#end#end

import ${packageName}.api.*

${view.block()}

    fun assertReferenceOtherClassCalled(times: Int = 1) {
        assertThat(referenceOtherClassCalls.size).withFailMessage("Expected referenceOtherClass to be called $times times, but was called $referenceOtherClassCalls times").isEqualTo(times)
    }

    fun assertReferenceOtherClassCalledForArgs(args: ExpectedOtherClass.() -> Unit, times: Int = 1) {
        val calls = referenceOtherClassCalls.filter { diffOtherClass(it, args) == "" }
        assertThat(calls.size).withFailMessage("Expected referenceOtherClass to be called $times times, but was called $referenceOtherClassCalls times").isEqualTo(times)
    }

    // referenceLegacyType
    private var referenceLegacyTypeCalls = mutableListOf<com.some.pkg.legacy.LegacyType>()
    private val referenceLegacyTypeResponses = mutableListOf<Pair<com.some.pkg.legacy.LegacyType, com.some.pkg.legacy.LegacyType>>()

    fun setReferenceLegacyTypeResponse(args: com.some.pkg.legacy.LegacyType, response: com.some.pkg.legacy.LegacyType) {
        referenceLegacyTypeResponses.add(Pair(args, response))
    }

    override fun referenceLegacyType(legacyType: com.some.pkg.legacy.LegacyType): com.some.pkg.legacy.LegacyType {
        referenceLegacyTypeCalls.add(legacyType)
        return referenceLegacyTypeResponses.find { it.first == legacyType }?.second ?: legacyType
    }

    fun assertReferenceLegacyTypeCalled(times: Int = 1) {
        assertThat(referenceLegacyTypeCalls.size).withFailMessage("Expected referenceLegacyType to be called $times times, but was called $referenceLegacyTypeCalls times").isEqualTo(times)
    }

    fun assertReferenceLegacyTypeCalledForArgs(args: com.some.pkg.legacy.LegacyType, times: Int = 1) {
        val calls = referenceLegacyTypeCalls.filter { it == args }
        assertThat(calls.size).withFailMessage("Expected referenceLegacyType to be called $times times, but was called $referenceLegacyTypeCalls times").isEqualTo(times)
    }
}

class SomeModuleMocks: ContextModule {
    override fun apply(builder: ContextBuilder) {
        builder
            .setImpl(SomeInterface2::class.java, SomeInterface2Mock::class.java)
    }
}