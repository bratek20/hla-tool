package ${packageName}.fixtures
#if($imports.size() > 0)

#foreach($import in $imports)
import ${import}.api.*
import ${import}.fixtures.*
#end
#end

import ${packageName}.api.*
#foreach($b in $simpleBuilders)

fun ${b.declaration()} {
    ${b.body()}
}
#end
#foreach($b in $builders)

data class ${b.defName()}(
    #foreach($field in $b.fields)
    var $field.name: $field.type.name() = $field.defaultValue(),
    #end
)
fun ${b.funName()}(init: ${b.defName()}.() -> Unit = {}): ${b.api.name()} {
    val def = ${b.defName()}().apply(init)
    return ${b.api.constructorCall()}(
    #foreach($field in $b.fields)
        $field.name = $field.build("def"),
    #end
    )
}#if($foreach.hasNext)

#end#end
#if($externalTypesBuilders)

$externalTypesBuilders
#end