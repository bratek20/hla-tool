namespace ${moduleName}.Builder {
#foreach($b in $simpleBuilders)
    export function ${b.declaration()} {
        ${b.body()}
    }

#end
#foreach($b in $builders)
    export interface ${b.defName()} {
        #foreach($field in $b.fields)
        $field.name?: $field.type.name(),
        #end
    }
    export function ${b.funName()}(def?: ${b.defName()}): ${b.api.name()} {
        #foreach($field in $b.fields)
        const final_$field.name = def?.$field.name ?? $field.defaultValue()
        #end

        return ${b.api.constructorCall()}(
        #foreach($field in $b.fields)
            $field.build(),
        #end
        )
    }
    #if($foreach.hasNext)

    #end
#end
}