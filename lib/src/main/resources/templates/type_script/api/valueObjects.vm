#foreach($nt in $simpleValueObjects)
class ${nt.name()} {
    constructor(
        public readonly value: ${nt.boxedType.name()}
    ) {}

    equals(other: ${nt.name()}): boolean {
        return this.value === other.value
    }

    toString(): string {
        return this.value.toString()
    }
    #if(${nt.boxedType.name()} == "number")

    plus(other: ${nt.name()}): ${nt.name()} {
        return new ${nt.name()}(this.value + other.value);
    }

    minus(other: ${nt.name()}): ${nt.name()} {
        return new ${nt.name()}(this.value - other.value);
    }

    times(other: ${nt.name()}): ${nt.name()} {
        return new ${nt.name()}(this.value * other.value);
    }
    #end
}#if($foreach.hasNext || $complexValueObjects.size() > 0)


#end#end#foreach($p in $complexValueObjects)
class ${p.name()} {
#foreach($field in $p.fields)
    $field.classDeclaration()
#end

    static create(
    #foreach($field in $p.fields)
        $field.createDeclaration(),
    #end
    ): ${p.name()} {
        const instance = new ${p.name()}()
    #foreach($field in $p.fields)
        $field.createConstructorPass()
    #end
        return instance
    }
#foreach($getter in $p.getters())

    ${getter.name}(): ${getter.type.name()} {
        return ${getter.type.deserialize("this.${getter.field}")}
    }
#end
}#if($foreach.hasNext)


#end#end