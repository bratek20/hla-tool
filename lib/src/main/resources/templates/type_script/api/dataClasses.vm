#foreach($p in $dataClasses)
class ${p.name()} {
    #foreach($field in $p.fields)
    ${field.classDeclaration()}
    #end

    static create(
        #foreach($field in $p.fields)
        $field.createDeclaration(),
        #end
    ): ${p.name()} {
        const instance = new ${p.name()}()
        #foreach($field in $p.fields)
        $field.createConstructorPass()
        #end
        return instance
    }

    static createNamed({
        #foreach($field in $p.fields)
        $field.name,
        #end
    }: {
        #foreach($field in $p.fields)
        $field.createDeclarationNoDefault();
        #end
    }): ${p.name()} {
        const instance = new ${p.name()}()
        #foreach($field in $p.fields)
        $field.createConstructorPass()
        #end
        return instance
    }
    #foreach($getter in $p.getters())

    ${getter.name}(): ${getter.type.name()} {
        return ${getter.type.deserialize("this.${getter.field}")}
    }
    #end
    #foreach($setter in $p.setters())

    ${setter.name}(${setter.publicField}: ${setter.type.name()}): void {
        this.${setter.privateField} = ${setter.type.serialize(${setter.publicField})}
    }
    #end

    update(other: ${p.name()}) {
       #foreach($setter in $p.setters())
        this.${setter.privateField} = other.${setter.privateField}
       #end
    }
}#if($foreach.hasNext)


#end#end