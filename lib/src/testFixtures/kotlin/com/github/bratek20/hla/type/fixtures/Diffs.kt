// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.type.fixtures

import com.github.bratek20.hla.type.api.*

fun diffHlaTypePath(given: HlaTypePath, expected: String, path: String = ""): String {
    if (hlaTypePathGetValue(given) != expected) { return "${path}value ${hlaTypePathGetValue(given)} != ${expected}" }
    return ""
}

fun diffTypeKind(given: TypeKind, expected: String, path: String = ""): String {
    if (given != TypeKind.valueOf(expected)) { return "${path}value ${given.name} != ${expected}" }
    return ""
}

data class ExpectedHlaType(
    var name: String? = null,
    var path: String? = null,
)
fun diffHlaType(given: HlaType, expectedInit: ExpectedHlaType.() -> Unit, path: String = ""): String {
    val expected = ExpectedHlaType().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.name?.let {
        if (given.getName() != it) { result.add("${path}name ${given.getName()} != ${it}") }
    }

    expected.path?.let {
        if (diffHlaTypePath(given.getPath(), it) != "") { result.add(diffHlaTypePath(given.getPath(), it, "${path}path.")) }
    }

    return result.joinToString("\n")
}