// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.typesworld.fixtures

import com.github.bratek20.hla.typesworld.api.*

fun hlaTypeName(value: String = "someValue"): HlaTypeName {
    return HlaTypeName(value)
}

fun hlaTypePath(value: String = "SomeRootGroup/SomeNestedGroup/SomeModule/Api/ValueObjects"): HlaTypePath {
    return hlaTypePathCreate(value)
}

data class HlaTypeDef(
    var name: String = "someValue",
    var path: String = "SomeRootGroup/SomeNestedGroup/SomeModule/Api/ValueObjects",
)
fun hlaType(init: HlaTypeDef.() -> Unit = {}): HlaType {
    val def = HlaTypeDef().apply(init)
    return HlaType.create(
        name = HlaTypeName(def.name),
        path = hlaTypePathCreate(def.path),
    )
}

data class ClassFieldDef(
    var name: String = "someValue",
    var type: (HlaTypeDef.() -> Unit) = {},
)
fun classField(init: ClassFieldDef.() -> Unit = {}): ClassField {
    val def = ClassFieldDef().apply(init)
    return ClassField.create(
        name = def.name,
        type = hlaType(def.type),
    )
}

data class ClassTypeDef(
    var type: (HlaTypeDef.() -> Unit) = {},
    var fields: List<(ClassFieldDef.() -> Unit)> = emptyList(),
    var extends: (HlaTypeDef.() -> Unit)? = null,
)
fun classType(init: ClassTypeDef.() -> Unit = {}): ClassType {
    val def = ClassTypeDef().apply(init)
    return ClassType.create(
        type = hlaType(def.type),
        fields = def.fields.map { it -> classField(it) },
        extends = def.extends?.let { it -> hlaType(it) },
    )
}

data class ConcreteWrapperDef(
    var type: (HlaTypeDef.() -> Unit) = {},
    var wrappedType: (HlaTypeDef.() -> Unit) = {},
)
fun concreteWrapper(init: ConcreteWrapperDef.() -> Unit = {}): ConcreteWrapper {
    val def = ConcreteWrapperDef().apply(init)
    return ConcreteWrapper.create(
        type = hlaType(def.type),
        wrappedType = hlaType(def.wrappedType),
    )
}

data class ConcreteParametrizedClassDef(
    var name: String = "someValue",
    var path: String = "SomeRootGroup/SomeNestedGroup/SomeModule/Api/ValueObjects",
    var typeArguments: List<(HlaTypeDef.() -> Unit)> = emptyList(),
)
fun concreteParametrizedClass(init: ConcreteParametrizedClassDef.() -> Unit = {}): ConcreteParametrizedClass {
    val def = ConcreteParametrizedClassDef().apply(init)
    return ConcreteParametrizedClass.create(
        name = HlaTypeName(def.name),
        path = hlaTypePathCreate(def.path),
        typeArguments = def.typeArguments.map { it -> hlaType(it) },
    )
}