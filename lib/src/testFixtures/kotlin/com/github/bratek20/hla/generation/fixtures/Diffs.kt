// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.generation.fixtures

import com.github.bratek20.hla.directory.api.*
import com.github.bratek20.hla.directory.fixtures.*
import com.github.bratek20.hla.facade.api.*
import com.github.bratek20.hla.facade.fixtures.*
import com.github.bratek20.hla.parsing.api.*
import com.github.bratek20.hla.parsing.fixtures.*

import com.github.bratek20.hla.generation.api.*
import com.github.bratek20.utils.directory.fixtures.ExpectedDirectory
import com.github.bratek20.utils.directory.fixtures.diffDirectory

data class ExpectedGenerateArgs(
    var group: (ExpectedModuleGroup.() -> Unit)? = null,
    var moduleToGenerate: String? = null,
    var onlyUpdate: Boolean? = null,
)
fun diffGenerateArgs(given: GenerateArgs, expectedInit: ExpectedGenerateArgs.() -> Unit, path: String = ""): String {
    val expected = ExpectedGenerateArgs().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.group?.let {
        if (diffModuleGroup(given.getGroup(), it) != "") { result.add(diffModuleGroup(given.getGroup(), it, "${path}group.")) }
    }

    expected.moduleToGenerate?.let {
        if (diffModuleName(given.getModuleToGenerate(), it) != "") { result.add(diffModuleName(given.getModuleToGenerate(), it, "${path}moduleToGenerate.")) }
    }

    expected.onlyUpdate?.let {
        if (given.getOnlyUpdate() != it) { result.add("${path}onlyUpdate ${given.getOnlyUpdate()} != ${it}") }
    }

    return result.joinToString("\n")
}

data class ExpectedGenerateResult(
    var main: (ExpectedDirectory.() -> Unit)? = null,
    var fixtures: (ExpectedDirectory.() -> Unit)? = null,
    var tests: (ExpectedDirectory.() -> Unit)? = null,
)
fun diffGenerateResult(given: GenerateResult, expectedInit: ExpectedGenerateResult.() -> Unit, path: String = ""): String {
    val expected = ExpectedGenerateResult().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.main?.let {
        if (diffDirectory(given.getMain(), it) != "") { result.add(diffDirectory(given.getMain(), it, "${path}main.")) }
    }

    expected.fixtures?.let {
        if (diffDirectory(given.getFixtures(), it) != "") { result.add(diffDirectory(given.getFixtures(), it, "${path}fixtures.")) }
    }

    expected.tests?.let {
        if (diffDirectory(given.getTests()!!, it) != "") { result.add(diffDirectory(given.getTests()!!, it, "${path}tests.")) }
    }

    return result.joinToString("\n")
}