// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.writing.fixtures

import com.github.bratek20.hla.facade.api.*
import com.github.bratek20.hla.facade.fixtures.*
import com.github.bratek20.hla.generation.api.*
import com.github.bratek20.hla.generation.fixtures.*
import com.github.bratek20.utils.directory.api.*
import com.github.bratek20.utils.directory.fixtures.*

import com.github.bratek20.hla.writing.api.*

data class ExpectedWriteArgs(
    var hlaFolderPath: String? = null,
    var module: (ExpectedGeneratedModule.() -> Unit)? = null,
    var profile: (ExpectedHlaProfile.() -> Unit)? = null,
    var onlyUpdate: Boolean? = null,
)
fun diffWriteArgs(given: WriteArgs, expectedInit: ExpectedWriteArgs.() -> Unit, path: String = ""): String {
    val expected = ExpectedWriteArgs().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.hlaFolderPath?.let {
        if (diffPath(given.getHlaFolderPath(), it) != "") { result.add(diffPath(given.getHlaFolderPath(), it, "${path}hlaFolderPath.")) }
    }

    expected.module?.let {
        if (diffGeneratedModule(given.getModule(), it) != "") { result.add(diffGeneratedModule(given.getModule(), it, "${path}module.")) }
    }

    expected.profile?.let {
        if (diffHlaProfile(given.getProfile(), it) != "") { result.add(diffHlaProfile(given.getProfile(), it, "${path}profile.")) }
    }

    expected.onlyUpdate?.let {
        if (given.getOnlyUpdate() != it) { result.add("${path}onlyUpdate ${given.getOnlyUpdate()} != ${it}") }
    }

    return result.joinToString("\n")
}