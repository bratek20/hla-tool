// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.typesworld.fixtures

import com.github.bratek20.hla.typesworld.api.*

fun diffHlaTypeName(given: HlaTypeName, expected: String, path: String = ""): String {
    if (given.value != expected) { return "${path}value ${given.value} != ${expected}" }
    return ""
}

fun diffHlaTypePath(given: HlaTypePath, expected: String, path: String = ""): String {
    if (hlaTypePathGetValue(given) != expected) { return "${path}value ${hlaTypePathGetValue(given)} != ${expected}" }
    return ""
}

fun diffHlaTypeKind(given: HlaTypeKind, expected: String, path: String = ""): String {
    if (given != HlaTypeKind.valueOf(expected)) { return "${path}value ${given.name} != ${expected}" }
    return ""
}

data class ExpectedHlaType(
    var name: String? = null,
    var path: String? = null,
)
fun diffHlaType(given: HlaType, expectedInit: ExpectedHlaType.() -> Unit, path: String = ""): String {
    val expected = ExpectedHlaType().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.name?.let {
        if (diffHlaTypeName(given.getName(), it) != "") { result.add(diffHlaTypeName(given.getName(), it, "${path}name.")) }
    }

    expected.path?.let {
        if (diffHlaTypePath(given.getPath(), it) != "") { result.add(diffHlaTypePath(given.getPath(), it, "${path}path.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedClassField(
    var name: String? = null,
    var type: (ExpectedHlaType.() -> Unit)? = null,
)
fun diffClassField(given: ClassField, expectedInit: ExpectedClassField.() -> Unit, path: String = ""): String {
    val expected = ExpectedClassField().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.name?.let {
        if (given.getName() != it) { result.add("${path}name ${given.getName()} != ${it}") }
    }

    expected.type?.let {
        if (diffHlaType(given.getType(), it) != "") { result.add(diffHlaType(given.getType(), it, "${path}type.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedClassType(
    var type: (ExpectedHlaType.() -> Unit)? = null,
    var fields: List<(ExpectedClassField.() -> Unit)>? = null,
    var extendsEmpty: Boolean? = null,
    var extends: (ExpectedHlaType.() -> Unit)? = null,
)
fun diffClassType(given: ClassType, expectedInit: ExpectedClassType.() -> Unit, path: String = ""): String {
    val expected = ExpectedClassType().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.type?.let {
        if (diffHlaType(given.getType(), it) != "") { result.add(diffHlaType(given.getType(), it, "${path}type.")) }
    }

    expected.fields?.let {
        if (given.getFields().size != it.size) { result.add("${path}fields size ${given.getFields().size} != ${it.size}"); return@let }
        given.getFields().forEachIndexed { idx, entry -> if (diffClassField(entry, it[idx]) != "") { result.add(diffClassField(entry, it[idx], "${path}fields[${idx}].")) } }
    }

    expected.extendsEmpty?.let {
        if ((given.getExtends() == null) != it) { result.add("${path}extends empty ${(given.getExtends() == null)} != ${it}") }
    }

    expected.extends?.let {
        if (diffHlaType(given.getExtends()!!, it) != "") { result.add(diffHlaType(given.getExtends()!!, it, "${path}extends.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedConcreteWrapper(
    var type: (ExpectedHlaType.() -> Unit)? = null,
    var wrappedType: (ExpectedHlaType.() -> Unit)? = null,
)
fun diffConcreteWrapper(given: ConcreteWrapper, expectedInit: ExpectedConcreteWrapper.() -> Unit, path: String = ""): String {
    val expected = ExpectedConcreteWrapper().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.type?.let {
        if (diffHlaType(given.getType(), it) != "") { result.add(diffHlaType(given.getType(), it, "${path}type.")) }
    }

    expected.wrappedType?.let {
        if (diffHlaType(given.getWrappedType(), it) != "") { result.add(diffHlaType(given.getWrappedType(), it, "${path}wrappedType.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedConcreteParametrizedClass(
    var name: String? = null,
    var path: String? = null,
    var typeArguments: List<(ExpectedHlaType.() -> Unit)>? = null,
)
fun diffConcreteParametrizedClass(given: ConcreteParametrizedClass, expectedInit: ExpectedConcreteParametrizedClass.() -> Unit, path: String = ""): String {
    val expected = ExpectedConcreteParametrizedClass().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.name?.let {
        if (diffHlaTypeName(given.getName(), it) != "") { result.add(diffHlaTypeName(given.getName(), it, "${path}name.")) }
    }

    expected.path?.let {
        if (diffHlaTypePath(given.getPath(), it) != "") { result.add(diffHlaTypePath(given.getPath(), it, "${path}path.")) }
    }

    expected.typeArguments?.let {
        if (given.getTypeArguments().size != it.size) { result.add("${path}typeArguments size ${given.getTypeArguments().size} != ${it.size}"); return@let }
        given.getTypeArguments().forEachIndexed { idx, entry -> if (diffHlaType(entry, it[idx]) != "") { result.add(diffHlaType(entry, it[idx], "${path}typeArguments[${idx}].")) } }
    }

    return result.joinToString("\n")
}