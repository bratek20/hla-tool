// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.facade.fixtures

import com.github.bratek20.hla.generation.api.*
import com.github.bratek20.hla.generation.fixtures.*
import com.github.bratek20.utils.directory.api.*
import com.github.bratek20.utils.directory.fixtures.*

import com.github.bratek20.hla.facade.api.*

fun diffModuleName(given: ModuleName, expected: String, path: String = ""): String {
    if (given.value != expected) { return "${path}value ${given.value} != ${expected}" }
    return ""
}

fun diffProfileName(given: ProfileName, expected: String, path: String = ""): String {
    if (given.value != expected) { return "${path}value ${given.value} != ${expected}" }
    return ""
}

fun diffModuleLanguage(given: ModuleLanguage, expected: String, path: String = ""): String {
    if (given != ModuleLanguage.valueOf(expected)) { return "${path}value ${given.name} != ${expected}" }
    return ""
}

data class ExpectedModuleOperationArgs(
    var hlaFolderPath: String? = null,
    var profileName: String? = null,
    var moduleName: String? = null,
)
fun diffModuleOperationArgs(given: ModuleOperationArgs, expectedInit: ExpectedModuleOperationArgs.() -> Unit, path: String = ""): String {
    val expected = ExpectedModuleOperationArgs().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.hlaFolderPath?.let {
        if (diffPath(given.getHlaFolderPath(), it) != "") { result.add(diffPath(given.getHlaFolderPath(), it, "${path}hlaFolderPath.")) }
    }

    expected.profileName?.let {
        if (diffProfileName(given.getProfileName(), it) != "") { result.add(diffProfileName(given.getProfileName(), it, "${path}profileName.")) }
    }

    expected.moduleName?.let {
        if (diffModuleName(given.getModuleName(), it) != "") { result.add(diffModuleName(given.getModuleName(), it, "${path}moduleName.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedAllModulesOperationArgs(
    var hlaFolderPath: String? = null,
    var profileName: String? = null,
)
fun diffAllModulesOperationArgs(given: AllModulesOperationArgs, expectedInit: ExpectedAllModulesOperationArgs.() -> Unit, path: String = ""): String {
    val expected = ExpectedAllModulesOperationArgs().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.hlaFolderPath?.let {
        if (diffPath(given.getHlaFolderPath(), it) != "") { result.add(diffPath(given.getHlaFolderPath(), it, "${path}hlaFolderPath.")) }
    }

    expected.profileName?.let {
        if (diffProfileName(given.getProfileName(), it) != "") { result.add(diffProfileName(given.getProfileName(), it, "${path}profileName.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedTypeScriptConfig(
    var mainTsconfigPath: String? = null,
    var testTsconfigPath: String? = null,
    var launchJsonPath: String? = null,
    var packageJsonPath: String? = null,
)
fun diffTypeScriptConfig(given: TypeScriptConfig, expectedInit: ExpectedTypeScriptConfig.() -> Unit, path: String = ""): String {
    val expected = ExpectedTypeScriptConfig().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.mainTsconfigPath?.let {
        if (diffPath(given.getMainTsconfigPath(), it) != "") { result.add(diffPath(given.getMainTsconfigPath(), it, "${path}mainTsconfigPath.")) }
    }

    expected.testTsconfigPath?.let {
        if (diffPath(given.getTestTsconfigPath(), it) != "") { result.add(diffPath(given.getTestTsconfigPath(), it, "${path}testTsconfigPath.")) }
    }

    expected.launchJsonPath?.let {
        if (diffPath(given.getLaunchJsonPath(), it) != "") { result.add(diffPath(given.getLaunchJsonPath(), it, "${path}launchJsonPath.")) }
    }

    expected.packageJsonPath?.let {
        if (diffPath(given.getPackageJsonPath(), it) != "") { result.add(diffPath(given.getPackageJsonPath(), it, "${path}packageJsonPath.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedSubmodulePath(
    var path: String? = null,
    var submoduleEmpty: Boolean? = null,
    var submodule: String? = null,
    var submodules: List<String>? = null,
)
fun diffSubmodulePath(given: SubmodulePath, expectedInit: ExpectedSubmodulePath.() -> Unit, path: String = ""): String {
    val expected = ExpectedSubmodulePath().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.path?.let {
        if (diffPath(given.getPath(), it) != "") { result.add(diffPath(given.getPath(), it, "${path}path.")) }
    }

    expected.submoduleEmpty?.let {
        if ((given.getSubmodule() == null) != it) { result.add("${path}submodule empty ${(given.getSubmodule() == null)} != ${it}") }
    }

    expected.submodule?.let {
        if (diffSubmoduleName(given.getSubmodule()!!, it) != "") { result.add(diffSubmoduleName(given.getSubmodule()!!, it, "${path}submodule.")) }
    }

    expected.submodules?.let {
        if (given.getSubmodules().size != it.size) { result.add("${path}submodules size ${given.getSubmodules().size} != ${it.size}"); return@let }
        given.getSubmodules().forEachIndexed { idx, entry -> if (diffSubmoduleName(entry, it[idx]) != "") { result.add(diffSubmoduleName(entry, it[idx], "${path}submodules[${idx}].")) } }
    }

    return result.joinToString("\n")
}

data class ExpectedHlaSrcPaths(
    var default: String? = null,
    var overrides: List<(ExpectedSubmodulePath.() -> Unit)>? = null,
)
fun diffHlaSrcPaths(given: HlaSrcPaths, expectedInit: ExpectedHlaSrcPaths.() -> Unit, path: String = ""): String {
    val expected = ExpectedHlaSrcPaths().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.default?.let {
        if (diffPath(given.getDefault(), it) != "") { result.add(diffPath(given.getDefault(), it, "${path}default.")) }
    }

    expected.overrides?.let {
        if (given.getOverrides().size != it.size) { result.add("${path}overrides size ${given.getOverrides().size} != ${it.size}"); return@let }
        given.getOverrides().forEachIndexed { idx, entry -> if (diffSubmodulePath(entry, it[idx]) != "") { result.add(diffSubmodulePath(entry, it[idx], "${path}overrides[${idx}].")) } }
    }

    return result.joinToString("\n")
}

data class ExpectedHlaPaths(
    var project: String? = null,
    var src: (ExpectedHlaSrcPaths.() -> Unit)? = null,
)
fun diffHlaPaths(given: HlaPaths, expectedInit: ExpectedHlaPaths.() -> Unit, path: String = ""): String {
    val expected = ExpectedHlaPaths().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.project?.let {
        if (diffPath(given.getProject(), it) != "") { result.add(diffPath(given.getProject(), it, "${path}project.")) }
    }

    expected.src?.let {
        if (diffHlaSrcPaths(given.getSrc(), it) != "") { result.add(diffHlaSrcPaths(given.getSrc(), it, "${path}src.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedHlaProfileImport(
    var hlaFolderPath: String? = null,
    var profileName: String? = null,
)
fun diffHlaProfileImport(given: HlaProfileImport, expectedInit: ExpectedHlaProfileImport.() -> Unit, path: String = ""): String {
    val expected = ExpectedHlaProfileImport().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.hlaFolderPath?.let {
        if (diffPath(given.getHlaFolderPath(), it) != "") { result.add(diffPath(given.getHlaFolderPath(), it, "${path}hlaFolderPath.")) }
    }

    expected.profileName?.let {
        if (diffProfileName(given.getProfileName(), it) != "") { result.add(diffProfileName(given.getProfileName(), it, "${path}profileName.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedHlaProfile(
    var name: String? = null,
    var language: String? = null,
    var paths: (ExpectedHlaPaths.() -> Unit)? = null,
    var typeScriptEmpty: Boolean? = null,
    var typeScript: (ExpectedTypeScriptConfig.() -> Unit)? = null,
    var onlyPatterns: List<String>? = null,
    var imports: List<(ExpectedHlaProfileImport.() -> Unit)>? = null,
)
fun diffHlaProfile(given: HlaProfile, expectedInit: ExpectedHlaProfile.() -> Unit, path: String = ""): String {
    val expected = ExpectedHlaProfile().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.name?.let {
        if (diffProfileName(given.getName(), it) != "") { result.add(diffProfileName(given.getName(), it, "${path}name.")) }
    }

    expected.language?.let {
        if (diffModuleLanguage(given.getLanguage(), it) != "") { result.add(diffModuleLanguage(given.getLanguage(), it, "${path}language.")) }
    }

    expected.paths?.let {
        if (diffHlaPaths(given.getPaths(), it) != "") { result.add(diffHlaPaths(given.getPaths(), it, "${path}paths.")) }
    }

    expected.typeScriptEmpty?.let {
        if ((given.getTypeScript() == null) != it) { result.add("${path}typeScript empty ${(given.getTypeScript() == null)} != ${it}") }
    }

    expected.typeScript?.let {
        if (diffTypeScriptConfig(given.getTypeScript()!!, it) != "") { result.add(diffTypeScriptConfig(given.getTypeScript()!!, it, "${path}typeScript.")) }
    }

    expected.onlyPatterns?.let {
        if (given.getOnlyPatterns().size != it.size) { result.add("${path}onlyPatterns size ${given.getOnlyPatterns().size} != ${it.size}"); return@let }
        given.getOnlyPatterns().forEachIndexed { idx, entry -> if (entry != it[idx]) { result.add("${path}onlyPatterns[${idx}] ${entry} != ${it[idx]}") } }
    }

    expected.imports?.let {
        if (given.getImports().size != it.size) { result.add("${path}imports size ${given.getImports().size} != ${it.size}"); return@let }
        given.getImports().forEachIndexed { idx, entry -> if (diffHlaProfileImport(entry, it[idx]) != "") { result.add(diffHlaProfileImport(entry, it[idx], "${path}imports[${idx}].")) } }
    }

    return result.joinToString("\n")
}