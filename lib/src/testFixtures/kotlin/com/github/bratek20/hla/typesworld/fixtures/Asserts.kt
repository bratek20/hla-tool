// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.typesworld.fixtures

import org.assertj.core.api.Assertions.assertThat

import com.github.bratek20.hla.typesworld.api.*

fun assertWorldTypeName(given: WorldTypeName, expected: String) {
    val diff = diffWorldTypeName(given, expected)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}


fun assertWorldTypePath(given: WorldTypePath, expected: String) {
    val diff = diffWorldTypePath(given, expected)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertWorldType(given: WorldType, expectedInit: ExpectedWorldType.() -> Unit) {
    val diff = diffWorldType(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertWorldClassField(given: WorldClassField, expectedInit: ExpectedWorldClassField.() -> Unit) {
    val diff = diffWorldClassField(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertWorldClassType(given: WorldClassType, expectedInit: ExpectedWorldClassType.() -> Unit) {
    val diff = diffWorldClassType(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertWorldConcreteWrapper(given: WorldConcreteWrapper, expectedInit: ExpectedWorldConcreteWrapper.() -> Unit) {
    val diff = diffWorldConcreteWrapper(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertWorldConcreteParametrizedClass(given: WorldConcreteParametrizedClass, expectedInit: ExpectedWorldConcreteParametrizedClass.() -> Unit) {
    val diff = diffWorldConcreteParametrizedClass(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}