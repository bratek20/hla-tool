// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.typesworld.fixtures

import org.assertj.core.api.Assertions.assertThat

import com.github.bratek20.hla.typesworld.api.*

fun assertHlaTypeName(given: HlaTypeName, expected: String) {
    val diff = diffHlaTypeName(given, expected)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}


fun assertHlaTypePath(given: HlaTypePath, expected: String) {
    val diff = diffHlaTypePath(given, expected)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertHlaType(given: HlaType, expectedInit: ExpectedHlaType.() -> Unit) {
    val diff = diffHlaType(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertClassField(given: ClassField, expectedInit: ExpectedClassField.() -> Unit) {
    val diff = diffClassField(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertClassType(given: ClassType, expectedInit: ExpectedClassType.() -> Unit) {
    val diff = diffClassType(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertConcreteWrapper(given: ConcreteWrapper, expectedInit: ExpectedConcreteWrapper.() -> Unit) {
    val diff = diffConcreteWrapper(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertConcreteParametrizedClass(given: ConcreteParametrizedClass, expectedInit: ExpectedConcreteParametrizedClass.() -> Unit) {
    val diff = diffConcreteParametrizedClass(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}