// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.validations.fixtures

import com.github.bratek20.hla.facade.api.*
import com.github.bratek20.hla.facade.fixtures.*
import com.github.bratek20.utils.directory.api.*
import com.github.bratek20.utils.directory.fixtures.*

import com.github.bratek20.hla.validations.api.*

fun diffPropertyValuePath(given: PropertyValuePath, expected: String, path: String = ""): String {
    if (given.value != expected) { return "${path}value ${given.value} != ${expected}" }
    return ""
}

data class ExpectedValidationContext(
    var path: String? = null,
)
fun diffValidationContext(given: ValidationContext, expectedInit: ExpectedValidationContext.() -> Unit, path: String = ""): String {
    val expected = ExpectedValidationContext().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.path?.let {
        if (diffPropertyValuePath(given.getPath(), it) != "") { result.add(diffPropertyValuePath(given.getPath(), it, "${path}path.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedValidationResult(
    var ok: Boolean? = null,
    var errors: List<String>? = null,
)
fun diffValidationResult(given: ValidationResult, expectedInit: ExpectedValidationResult.() -> Unit, path: String = ""): String {
    val expected = ExpectedValidationResult().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.ok?.let {
        if (given.getOk() != it) { result.add("${path}ok ${given.getOk()} != ${it}") }
    }

    expected.errors?.let {
        if (given.getErrors().size != it.size) { result.add("${path}errors size ${given.getErrors().size} != ${it.size}"); return@let }
        given.getErrors().forEachIndexed { idx, entry -> if (entry != it[idx]) { result.add("${path}errors[${idx}] ${entry} != ${it[idx]}") } }
    }

    return result.joinToString("\n")
}