// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.hlatypesworld.fixtures

import com.github.bratek20.hla.definitions.api.*
import com.github.bratek20.hla.definitions.fixtures.*
import com.github.bratek20.hla.facade.api.*
import com.github.bratek20.hla.facade.fixtures.*
import com.github.bratek20.hla.generation.api.*
import com.github.bratek20.hla.generation.fixtures.*
import com.github.bratek20.hla.parsing.api.*
import com.github.bratek20.hla.parsing.fixtures.*
import com.github.bratek20.hla.typesworld.api.*
import com.github.bratek20.hla.typesworld.fixtures.*

import com.github.bratek20.hla.hlatypesworld.api.*

fun diffHlaTypePath(given: HlaTypePath, expected: String, path: String = ""): String {
    if (hlaTypePathGetValue(given) != expected) { return "${path}value ${hlaTypePathGetValue(given)} != ${expected}" }
    return ""
}

data class ExpectedIdSourceInfo(
    var type: (ExpectedWorldType.() -> Unit)? = null,
    var fieldName: String? = null,
    var parent: (ExpectedWorldType.() -> Unit)? = null,
)
fun diffIdSourceInfo(given: IdSourceInfo, expectedInit: ExpectedIdSourceInfo.() -> Unit, path: String = ""): String {
    val expected = ExpectedIdSourceInfo().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.type?.let {
        if (diffWorldType(given.getType(), it) != "") { result.add(diffWorldType(given.getType(), it, "${path}type.")) }
    }

    expected.fieldName?.let {
        if (given.getFieldName() != it) { result.add("${path}fieldName ${given.getFieldName()} != ${it}") }
    }

    expected.parent?.let {
        if (diffWorldType(given.getParent(), it) != "") { result.add(diffWorldType(given.getParent(), it, "${path}parent.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedUniqueIdInfo(
    var type: (ExpectedWorldType.() -> Unit)? = null,
    var fieldName: String? = null,
    var parent: (ExpectedWorldType.() -> Unit)? = null,
)
fun diffUniqueIdInfo(given: UniqueIdInfo, expectedInit: ExpectedUniqueIdInfo.() -> Unit, path: String = ""): String {
    val expected = ExpectedUniqueIdInfo().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.type?.let {
        if (diffWorldType(given.getType(), it) != "") { result.add(diffWorldType(given.getType(), it, "${path}type.")) }
    }

    expected.fieldName?.let {
        if (given.getFieldName() != it) { result.add("${path}fieldName ${given.getFieldName()} != ${it}") }
    }

    expected.parent?.let {
        if (diffWorldType(given.getParent(), it) != "") { result.add(diffWorldType(given.getParent(), it, "${path}parent.")) }
    }

    return result.joinToString("\n")
}