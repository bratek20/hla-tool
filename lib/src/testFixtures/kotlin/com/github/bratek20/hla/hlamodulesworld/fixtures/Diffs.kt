// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.hlamodulesworld.fixtures

import com.github.bratek20.hla.definitions.api.*
import com.github.bratek20.hla.definitions.fixtures.*
import com.github.bratek20.hla.parsing.api.*
import com.github.bratek20.hla.parsing.fixtures.*

import com.github.bratek20.hla.hlamodulesworld.api.*

data class ExpectedWorldModuleGroup(
    var name: String? = null,
    var modules: List<(ExpectedModuleDefinition.() -> Unit)>? = null,
    var innerGroups: List<(ExpectedWorldModuleGroup.() -> Unit)>? = null,
)
fun diffWorldModuleGroup(given: WorldModuleGroup, expectedInit: ExpectedWorldModuleGroup.() -> Unit, path: String = ""): String {
    val expected = ExpectedWorldModuleGroup().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.name?.let {
        if (diffGroupName(given.getName(), it) != "") { result.add(diffGroupName(given.getName(), it, "${path}name.")) }
    }

    expected.modules?.let {
        if (given.getModules().size != it.size) { result.add("${path}modules size ${given.getModules().size} != ${it.size}"); return@let }
        given.getModules().forEachIndexed { idx, entry -> if (diffModuleDefinition(entry, it[idx]) != "") { result.add(diffModuleDefinition(entry, it[idx], "${path}modules[${idx}].")) } }
    }

    expected.innerGroups?.let {
        if (given.getInnerGroups().size != it.size) { result.add("${path}innerGroups size ${given.getInnerGroups().size} != ${it.size}"); return@let }
        given.getInnerGroups().forEachIndexed { idx, entry -> if (diffWorldModuleGroup(entry, it[idx]) != "") { result.add(diffWorldModuleGroup(entry, it[idx], "${path}innerGroups[${idx}].")) } }
    }

    return result.joinToString("\n")
}