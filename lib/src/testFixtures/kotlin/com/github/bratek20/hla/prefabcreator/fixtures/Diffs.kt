// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.prefabcreator.fixtures

import com.github.bratek20.hla.prefabcreator.api.*

data class ExpectedPrefabChildBlueprint(
    var name: String? = null,
    var viewType: String? = null,
)
fun diffPrefabChildBlueprint(given: PrefabChildBlueprint, expectedInit: ExpectedPrefabChildBlueprint.() -> Unit, path: String = ""): String {
    val expected = ExpectedPrefabChildBlueprint().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.name?.let {
        if (given.getName() != it) { result.add("${path}name ${given.getName()} != ${it}") }
    }

    expected.viewType?.let {
        if (given.getViewType() != it) { result.add("${path}viewType ${given.getViewType()} != ${it}") }
    }

    return result.joinToString("\n")
}

data class ExpectedPrefabBlueprint(
    var name: String? = null,
    var viewType: String? = null,
    var children: List<(ExpectedPrefabChildBlueprint.() -> Unit)>? = null,
)
fun diffPrefabBlueprint(given: PrefabBlueprint, expectedInit: ExpectedPrefabBlueprint.() -> Unit, path: String = ""): String {
    val expected = ExpectedPrefabBlueprint().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.name?.let {
        if (given.getName() != it) { result.add("${path}name ${given.getName()} != ${it}") }
    }

    expected.viewType?.let {
        if (given.getViewType() != it) { result.add("${path}viewType ${given.getViewType()} != ${it}") }
    }

    expected.children?.let {
        if (given.getChildren().size != it.size) { result.add("${path}children size ${given.getChildren().size} != ${it.size}"); return@let }
        given.getChildren().forEachIndexed { idx, entry -> if (diffPrefabChildBlueprint(entry, it[idx]) != "") { result.add(diffPrefabChildBlueprint(entry, it[idx], "${path}children[${idx}].")) } }
    }

    return result.joinToString("\n")
}