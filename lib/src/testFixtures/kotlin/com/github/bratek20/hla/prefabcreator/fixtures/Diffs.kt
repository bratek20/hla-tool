// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.hla.prefabcreator.fixtures

import com.github.bratek20.hla.prefabcreator.api.*

fun diffBlueprintType(given: BlueprintType, expected: String, path: String = ""): String {
    if (given != BlueprintType.valueOf(expected)) { return "${path}value ${given.name} != ${expected}" }
    return ""
}

data class ExpectedPrefabChildBlueprint(
    var name: String? = null,
    var viewType: String? = null,
)
fun diffPrefabChildBlueprint(given: PrefabChildBlueprint, expectedInit: ExpectedPrefabChildBlueprint.() -> Unit, path: String = ""): String {
    val expected = ExpectedPrefabChildBlueprint().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.name?.let {
        if (given.getName() != it) { result.add("${path}name ${given.getName()} != ${it}") }
    }

    expected.viewType?.let {
        if (given.getViewType() != it) { result.add("${path}viewType ${given.getViewType()} != ${it}") }
    }

    return result.joinToString("\n")
}

data class ExpectedPrefabBlueprint(
    var blueprintType: String? = null,
    var name: String? = null,
    var viewType: String? = null,
    var creationOrder: Int? = null,
    var children: List<(ExpectedPrefabChildBlueprint.() -> Unit)>? = null,
    var elementViewTypeEmpty: Boolean? = null,
    var elementViewType: String? = null,
)
fun diffPrefabBlueprint(given: PrefabBlueprint, expectedInit: ExpectedPrefabBlueprint.() -> Unit, path: String = ""): String {
    val expected = ExpectedPrefabBlueprint().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.blueprintType?.let {
        if (diffBlueprintType(given.getBlueprintType(), it) != "") { result.add(diffBlueprintType(given.getBlueprintType(), it, "${path}blueprintType.")) }
    }

    expected.name?.let {
        if (given.getName() != it) { result.add("${path}name ${given.getName()} != ${it}") }
    }

    expected.viewType?.let {
        if (given.getViewType() != it) { result.add("${path}viewType ${given.getViewType()} != ${it}") }
    }

    expected.creationOrder?.let {
        if (given.getCreationOrder() != it) { result.add("${path}creationOrder ${given.getCreationOrder()} != ${it}") }
    }

    expected.children?.let {
        if (given.getChildren().size != it.size) { result.add("${path}children size ${given.getChildren().size} != ${it.size}"); return@let }
        given.getChildren().forEachIndexed { idx, entry -> if (diffPrefabChildBlueprint(entry, it[idx]) != "") { result.add(diffPrefabChildBlueprint(entry, it[idx], "${path}children[${idx}].")) } }
    }

    expected.elementViewTypeEmpty?.let {
        if ((given.getElementViewType() == null) != it) { result.add("${path}elementViewType empty ${(given.getElementViewType() == null)} != ${it}") }
    }

    expected.elementViewType?.let {
        if (given.getElementViewType()!! != it) { result.add("${path}elementViewType ${given.getElementViewType()!!} != ${it}") }
    }

    return result.joinToString("\n")
}